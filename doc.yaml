openapi: 3.0.3
info:
  title: TaskFlow API & Architecture Documentation
  description: |
    ## Overview
    TaskFlow is an innovative task manager assistant with an automated UI agent designed to streamline productivity and reduce procrastination, inspired from [CatAlyst: Domain-Extensible Intervention for Preventing Task Procrastination Using Large Generative Models](https://arxiv.org/abs/2302.05678). Through its intelligent features, TaskFlow helps users organize their life, providing a seamless interface for managing both personal and professional tasks.

    <p align='center'><img src="https://i.ibb.co/fQr2Cbt/logo2.png" alt="taskflow" width="450"></p>


    ## Key Features
    1. **AI-Driven Task Management**: Integrates artificial intelligence to analyze task progress, and then offer further assistance to resume the task. This saves users from being stuck at a point in any task. The AI agent serves as an initiator, guiding users to overcome procrastination tendencies and manage tasks effectively.
    </br>
    </br>
    2. **Content Generation**: The AI agent mentioned earlier will help the users in carrying on their tasks by generating relevant contents. These contents will be continuation of the progress the user has already made in the respective task. Primarily, these contents are going to be textual contents.
    </br>
    </br>
    3. **Intelligent Task Scheduling**: Leverages sophisticated algorithms to dynamically schedule tasks based on user preferences, deadlines, and historical productivity data. This assists in optimizing daily routines and reduces the overwhelm of task management.
    </br>
    </br>
    4. **Effective Task Reminders**: Thanks to the in-house algorithm for task scheduling, TaskFlow gives timely reminders to users to resume or initiate a task before it gets too late. To add to the blessing, TaskFlow not only gives reminders, but also provided some initiating help to get things going on.
    </br>
    </br>
    5. **Statistical Analysis**: Provides detailed analytics on user performance and task completion trends. These insights enable users to understand their productivity patterns and make data-driven adjustments to their schedules.
    </br>
    </br>
    6. **Collaborative Task Management**: Allows users to create and manage tasks with other users. This enables teams to coordinate and collaborate on projects, ensuring that everyone is on the same page.



    ## Incremental Features
    1. **Progress Sharing**: Users can share their achievements of obtaining a milestone or completing a task on popular social media platforms before their friends and family.
    </br>
    </br>
    2. **Non-textual Content Generation**: Although primarily TaskFlow aims to offer textual contents, it can later expand to image or other types of contents as well.


    ## System Architecture
    - **Frontend**: We choose [Svelte](https://svelte.dev/) with [tailwindcss](https://tailwindcss.com/) for their innovative approach to frontend development, ensuring a responsive and interactive user interface with minimal overhead.
    <p align='center'><img src="https://upload.wikimedia.org/wikipedia/commons/thumb/1/1b/Svelte_Logo.svg/1200px-Svelte_Logo.svg.png" alt="Svelte" width="135" height="195"></p>
    </br>
    <p align='center'><img src="https://upload.wikimedia.org/wikipedia/commons/thumb/9/95/Tailwind_CSS_logo.svg/1920px-Tailwind_CSS_logo.svg.png" alt="Svelte" width="450"></p>
    </br>


    - **Backend & API**: We choose [Express.js](https://expressjs.com/) framework for its efficiency in handling multiple requests simultaneously, providing a robust and scalable backend solution.
    <p align='center'><img src="https://upload.wikimedia.org/wikipedia/commons/6/64/Expressjs.png" alt="Express.js" width="271" height="114"></p>

    - **Database**: We selected [PostgresSQL](https://www.postgresql.org/) for its advanced features in handling complex queries and large datasets, ensuring data integrity and performance.
    <p align='center'><img src="https://upload.wikimedia.org/wikipedia/commons/thumb/2/29/Postgresql_elephant.svg/1024px-Postgresql_elephant.svg.png" alt="PostgreSQL" width="169" height="205"></p>

    - **Architecture**: Our system will follow [client-server architecture](https://en.wikipedia.org/wiki/Client%E2%80%93server_model) as it is suitable for our current scope and complexity. It will provide sufficient scalability and maintainability without the overhead of distributed systems.
      - Tight coupling and interdependence of components
      - Simplicity in development and deployment
      - Performance considerations
      - Project scale and complexity
      <p align='center'><img src="https://upload.wikimedia.org/wikipedia/commons/thumb/c/c9/Client-server-model.svg/1200px-Client-server-model.svg.png" alt="Client-Server Architecture" width="450"></p>


    - **Workflow Diagram**:  
      <p align='center'><img src="https://i.ibb.co/93SjgST/flow-diagram.png" alt="Workflow" width="700"></p>

    - **Deployment**: We intend to use [Vercel](https://vercel.com/) for frontend services and [Supabase](https://supabase.com/) for database and storage. 
      <p align='center'>
        <img src='https://www.vectorlogo.zone/logos/vercel/vercel-ar21.svg' alt='Logo' width='271'>
        </br>
        <img src='https://www.vectorlogo.zone/logos/supabase/supabase-ar21.svg' alt='Logo' width='300'>
      </p>


    **<p>Members of A1 - Group 08:</p>**
    <p>1905001 - Mohammad Sadat Hossain</p>
    <p>1905004 - Asif Azad</p>
    <p>1905015 - Amirul Islam Alif</p>

  contact:
    name: Sadat
    email: sadatho2014@gmail.com

  version: 1.0.11
servers:
  # Added by API Auto Mocking Plugin
  - description: SwaggerHub API Auto Mocking
    url: https://virtserver.swaggerhub.com/SADATHO2014/taskflow-api/1.0.11
  - description: TaskFlow Server
    url: https://taskflow-express-api.vercel.app/

paths:
  /task_completion:
    post:
      tags:
        - OpenAI API
      summary: Perform task completion using Chat Completion API
      description: |
        This endpoint allows you to use OpenAI's chat completion API to generate responses for a given task.
      requestBody:
        description: Request body for task completion
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                messages:
                  type: array
                  items:
                    type: object
                    properties:
                      role:
                        type: string
                      content:
                        type: string
              required:
                - messages
              example:
                messages:
                  - role: "system"
                    content: "You are helping to complete the task. The already completed part of the task will be given as context to you."
                  - role: "user"
                    content: "This is the documentation for our cse-408 software project."
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              example:
                id: YOUR_UNIQUE_REQUEST_ID
                object: chat.completion
                created: 1677649421
                model: gpt-3.5-turbo-0613
                choices:
                  index: 0
                  message:
                    role: "assistant"
                    content: "Project Overview:\nThe CSE-408 Software Project aims to develop a computer science education platform that will help students learn computer science concepts and improve their programming skills. The platform will provide interactive lessons, coding challenges, and a community for students to connect and collaborate.\n\nFeatures:\n1. Interactive Lessons: The platform will offer a wide range of interactive lessons that cover various computer science topics, including programming languages, algorithms, data structures, and software development methodologies. The lessons will include interactive examples, quizzes, and coding exercises to engage the students.\n\n2. Coding Challenges: To enhance students' programming skills, the platform will provide coding challenges of varying difficulty levels. Students can solve these challenges in the programming language of their choice and receive instant feedback on their solutions. The challenges will cover topics like problem-solving, algorithm design, and implementation.\n\n3. Community Platform: The project will include a community platform where students can connect with each other, ask questions, and share resources. The platform will feature discussion forums, chat rooms"
                  inish_reason: "stop"
                  logprobs: null
                usage:
                  prompt_tokens: 47
                  completion_tokens: 645
                  total_tokens: 692
                system_fingerprint: null
  /task_chat:
    post:
      tags:
        - OpenAI API
      summary: This is the AI chatbot for a particular task
      description: |
        This endpoint allows you to use OpenAI's chat completion API to chat with the AI chatbot for a particular task.
      requestBody:
        description: Request body for task chatbot
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                messages:
                  type: array
                  items:
                    type: object
                    properties:
                      role:
                        type: string
                      content:
                        type: string
              required:
                - messages
              example:
                messages:
                  - role: "user"
                    content: "This is the task of developing home page of taskflow."
                  - role: "assistant"
                    content: "If you need assistance with designing or documenting the API for the home page of TaskFlow, I can assist."
                  - role: "user"
                    content: "Yes, I need assistance with designing the API for the home page of TaskFlow. What sections should be in the page?"
                  - role: "assistant"
                    content: "The home page of TaskFlow should have the following sections: 1. Header, 2. Navigation Bar, 3. Main Content, 4. Footer."
                  - role: "user"
                    content: "What should be in the header section?"

      responses:
        "200":
          description: Successful response
          content:
            application/json:
              example:
                id: YOUR_UNIQUE_REQUEST_ID
                object: chat.completion
                created: 1677649421
                model: gpt-3.5-turbo-0613
                choices:
                  index: 0
                  message:
                    role: "assistant"
                    content: "The header section should have the TaskFlow logo, the name of the user, and the logout button."

                  inish_reason: "stop"
                  logprobs: null
                usage:
                  prompt_tokens: 47
                  completion_tokens: 645
                  total_tokens: 692
                system_fingerprint: null

  /login:
    post:
      tags:
        - General
      summary: User login
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                user_name:
                  type: string
                  example: "Sadat999"
                password:
                  type: string
                  format: password
                  example: "p@sSw0rD"
                  description: Password will be hashed before sending to the server
        required: true
      responses:
        "200":
          description: Successful login
          content:
            application/json:
              schema:
                type: object
                properties:
                  token:
                    type: string
                    description: Access token for authenticated user
                    example: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9"
                  user_id:
                    type: string
                    description: ID of the authenticated user
                    example: "af3b4c5d6e7f8g9h0i1j2k3l4m5n6o7p"
        "400":
          description: Unauthorized attempt - Invalid credentials
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                  message:
                    type: string
                    example: "Invalid username or password"
  /register:
    post:
      tags:
        - General
      summary: Register a new user
      requestBody:
        description: User registration details
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/RegistrationInformation"
        required: true
      responses:
        "200":
          description: Successful registration
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: User successfully registered
                  links:
                    type: object
                    example: https://taskflow-express-api.vercel.app/login
        "400":
          description: Bad request - invalid input
        "409":
          description: Conflict - user already exists
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: User already exists
                  message:
                    type: string
                    example: The specified username or email address is already in use
        "500":
          description: Internal Server Error
  /logout:
    post:
      tags:
        - General
      summary: User logout
      responses:
        "200":
          description: Successful logout
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Successfully logged out
                  links:
                    type: object
                    example: https://taskflow-express-api.vercel.app/
        "500":
          description: Internal Server Error
  /get-public-profile/{user-id}:
    get:
      tags:
        - User Profile
      summary: Get public profile of a user to show to other users
      parameters:
        - name: user-id
          in: path
          description: ID of the user whose profile is to be retrieved
          required: true
          schema:
            type: string
            example: "d4e5f6g7h8i9j0k1l2m3n4o5p6q7r"
      responses:
        "200":
          description: User profile successfully retrieved
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserPublicProfileResponse"
        "404":
          description: User not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NonExistentUserResponse"
  /get-profile-settings:
    get:
      tags:
        - User Profile
      summary: Get profile settings of the authenticated user
      responses:
        "200":
          description: Profile settings successfully retrieved
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/UserProfileSettings"
                example:
                  user_id: "af3b4c5d6e7f8g9h0i1j2k3l4m5n6o7p"
                  first_name: "Mohammad"
                  middle_name: "Sadat"
                  last_name: "Hossain"
                  user_name: "Sadat999"
                  password: "f1A2s3D4"
                  phone_number: "01723456789"
                  email_address: "sadatdbt@gmail.com"
                  profile_picture: "https://unsplash.com/photos/a-long-exposure-photo-of-a-mountain-road-l2scWsGyq_U"
                  bio: "In this world, there are two types of people. Those who procrastinate, and those who don't."
        "500":
          description: Internal Server Error
  /get-usernames:
    post:
      tags:
        - User Profile
      summary: Get usernames of users matching the search query, which will be used in autocompletion.
      requestBody:
        description: Search query and number of usernames to retrieve
        content:
          application/json:
            schema:
              type: object
              properties:
                search_query:
                  type: string
                  example: "Asif"
                number_of_usernames:
                  type: integer
                  example: 10
      responses:
        "200":
          description: Usernames successfully retrieved
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    user_id:
                      type: string
                    user_name:
                      type: string
                example:
                  - user_id: "c3d4e5f6g7h8i9j0k1l2m3n4o5p6q7r"
                    user_name: "AsifAzad"
                  - user_id: "d4e5f6g7h8i9j0k1l2m3n4o5p6q7r8s9t"
                    user_name: "Asif123"
                  - user_id: "e5f6g7h8i9j0k1l2m3n4o5p6q7r8s9t0u"
                    user_name: "AsifAlShahriar"
                  - user_id: "f6g7h8i9j0k1l2m3n4o5p6q7r8s9t0u1v"
                    user_name: "AsifAhmed"
                  - user_id: "g7h8i9j0k1l2m3n4o5p6q7r8s9t0u1v2w"
                    user_name: "AsifNazrul"
                  - user_id: "h8i9j0k1l2m3n4o5p6q7r8s9t0u1v2w3x"
                    user_name: "AsifRahman"
                  - user_id: "i9j0k1l2m3n4o5p6q7r8s9t0u1v2w3x4y"
                    user_name: "AsifKarimAbir"
                  - user_id: "j0k1l2m3n4o5p6q7r8s9t0u1v2w3x4y5z"
                    user_name: "AsifKhan"
                  - user_id: "k1l2m3n4o5p6q7r8s9t0u1v2w3x4y5z6a"
                    user_name: "AsifKabir"
                  - user_id: "l2m3n4o5p6q7r8s9t0u1v2w3x4y5z6a7b"
                    user_name: "AsifKamal"
        "400":
          description: Bad request - Invalid input
        "500":
          description: Internal Server Error
  /update-profile-settings:
    put:
      tags:
        - User Profile
      summary: Update profile settings of the authenticated user (except profile picture)
      requestBody:
        description: User profile settings
        content:
          application/json:
            schema:
              allOf:
                - $ref: "#/components/schemas/UserProfileSettings"
              example:
                user_id: "af3b4c5d6e7f8g9h0i1j2k3l4m5n6o7p"
                first_name: "Mohammad"
                middle_name: "Sadat"
                last_name: "Hossain"
                user_name: "Sadat999"
                password: "f1A2s3D423vL#*1"
                phone_number: "01875123456"
                email_address: "buetcse19@gmail.com"
                bio: "Hello there! Welcome to my profile"
      responses:
        "200":
          description: Profile settings successfully updated
        "400":
          description: Bad request - Invalid input
        "500":
          description: Internal Server Error
  /update-profile-picture:
    put:
      tags:
        - User Profile
      summary: Update profile picture of the authenticated user
      requestBody:
        description: User profile picture
        content:
          application/json:
            schema:
              type: object
              properties:
                user_id:
                  type: string
                  format: string
                  example: "af3b4c5d6e7f8g9h0i1j2k3l4m5n6o7p"
                profile_picture:
                  type: object
                  format: binary
                  description: Image file to be uploaded
      responses:
        "200":
          description: Profile picture successfully updated
        "400":
          description: Bad request - Invalid input
        "500":
          description: Internal Server Error
  /delete-profile:
    delete:
      tags:
        - User Profile
      summary: Delete profile of the authenticated user
      responses:
        "200":
          description: Profile successfully deleted
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Profile successfully deleted
                  links:
                    type: object
                    example: https://taskflow-express-api.vercel.app/
        "500":
          description: Internal Server Error
  /get-boards:
    get:
      summary: Get all boards of the authenticated user for the dashboard page
      tags:
        - Board
      responses:
        "200":
          description: Boards successfully retrieved
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/BoardSummarizedForm"
                example:
                  - board_id: 1
                    board_name: "CSE408 Software Project | TaskFlow"
                    board_description: "This board oversees the progress of the CSE408 Software Project"
                    created_at: "2023-10-05T00:00:00.000Z"
                    board_deadline: "2024-01-31T00:00:00.000Z"
                    board_owner: "Sadat999"
                    board_overall_progress: 0.45
                  - board_id: 2
                    board_name: "CSE406 Security Project | Wazuh"
                    board_description: "This board oversees the progress of the CSE406 Security Project"
                    created_at: "2023-11-05T00:00:00.000Z"
                    board_deadline: "2024-01-31T00:00:00.000Z"
                    board_owner: "risenfromashes"
                    board_overall_progress: 0.12
                  - board_id: 3
                    board_name: "Thesis | Language Model of Phylogenetic Trees"
                    board_description: "Tune here to be in sync with the progress of our thesis work"
                    created_at: "2023-10-23T00:00:00.000Z"
                    board_deadline: "2024-01-31T00:00:00.000Z"
                    board_owner: "Sadat999"
                    board_overall_progress: 0.09
        "500":
          description: Internal Server Error
  /get-board-content/{board-id}:
    get:
      summary: Get lists and tasks of a board for the board view page
      tags:
        - Board
      parameters:
        - name: board-id
          in: path
          description: ID of the board whose content is to be retrieved
          required: true
          schema:
            type: integer
            example: 3
      responses:
        "200":
          description: Board content successfully retrieved
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/BoardContent"
                example:
                  board_id: 1
                  board_name: "CSE408 Software Project | TaskFlow"
                  board_lists:
                    - list_id: 1
                      list_name: "Project Scope Presentation"
                      list_tasks:
                        - task_id: 1
                          task_name: "Research to find a suitable project"
                          task_deadline: "2023-10-05T00:00:00.000Z"
                          task_label_color: "#FF0000"
                          task_overall_progress: 1.00
                        - task_id: 2
                          task_name: "Do a meeting for project finalization"
                          task_deadline: "2023-10-06T00:00:00.000Z"
                          task_label_color: "#123456"
                          task_overall_progress: 1.00
                        - task_id: 3
                          task_name: "Prepare the presentation slides"
                          task_deadline: "2023-10-08T00:00:00.000Z"
                          task_label_color: "#652921"
                          task_overall_progress: 1.00
                    - list_id: 2
                      list_name: "Mock UI Design"
                      list_tasks:
                        - task_id: 4
                          task_name: "Sketch the design in a meeting"
                          task_deadline: "2023-10-10T00:00:00.000Z"
                          task_label_color: "#F2A541"
                          task_overall_progress: 1.00
                        - task_id: 5
                          task_name: "Design the home page"
                          task_deadline: "2023-10-17T00:00:00.000Z"
                          task_label_color: "#F23A41"
                          task_overall_progress: 1.00
                        - task_id: 6
                          task_name: "Design the profile settings page"
                          task_deadline: "2023-10-17T00:00:00.000Z"
                          task_label_color: "#F2F541"
                          task_overall_progress: 1.00
                        - task_id: 7
                          task_name: "Design the board view page"
                          task_deadline: "2023-10-17T00:00:00.000Z"
                          task_label_color: "#F2F541"
                          task_overall_progress: 1.00
                        - task_id: 8
                          task_name: "Design the task view page"
                          task_deadline: "2023-10-17T00:00:00.000Z"
                          task_label_color: "#F2F541"
                          task_overall_progress: 1.00
                        - task_id: 9
                          task_name: "Design the task creation page"
                          task_deadline: "2023-10-17T00:00:00.000Z"
                          task_label_color: "#F2F541"
                          task_overall_progress: 1.00
                        - task_id: 10
                          task_name: "Finalize the design on Figma"
                          task_deadline: "2023-10-17T00:00:00.000Z"
                          task_label_color: "#A3F541"
                          task_overall_progress: 1.00
                    - list_id: 3
                      list_name: "API & Architecture Presentation"
                      list_tasks:
                        - task_id: 11
                          task_name: "Plan the APIs"
                          task_deadline: "2023-10-27T00:00:00.000Z"
                          task_label_color: "#F23A41"
                          task_overall_progress: 1.00
                        - task_id: 12
                          task_name: "Design the architecture"
                          task_deadline: "2023-10-27T00:00:00.000Z"
                          task_label_color: "#123456"
                          task_overall_progress: 0.21
                        - task_id: 13
                          task_name: "Document on SwaggerHub"
                          task_deadline: "2023-10-27T00:00:00.000Z"
                          task_label_color: "#652921"
                          task_overall_progress: 0.64
        "401":
          description: Unauthorized Access
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NonMemberBoardAccessResponse"
        "404":
          description: Board not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NonExistentBoardResponse"
        "500":
          description: Internal Server Error
  /get-board-settings/{board-id}:
    get:
      summary: Get settings of a board (including the member list)
      tags:
        - Board
      parameters:
        - name: board-id
          in: path
          description: ID of the board whose settings are to be retrieved
          required: true
          schema:
            type: integer
            example: 3
      responses:
        "200":
          description: Board settings successfully retrieved
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/BoardSettings"
                example:
                  board_id: 2
                  board_name: "CSE406 Security Project | Wazuh"
                  board_description: "This board oversees the progress of the CSE406 Security Project"
                  board_owner: "risenfromashes"
                  board_deadline: "2024-01-31T00:00:00.000Z"
                  board_members:
                    - user_id: "af3b4c5d6e7f8g9h0i1j2k3l4m5n6o7p"
                      user_name: "Sadat999"
                      full_name: "Mohammad Sadat Hossain"
                      profile_picture: "https://unsplash.com/photos/a-long-exposure-photo-of-a-mountain-road-l2scWsGyq_U"
                      member_role: 2
                    - user_id: "b1c2d3e4f5g6h7i8j9k0l1m2n3o4p5q"
                      user_name: "risenfromashes"
                      full_name: "Ashrafur Rahman Khan"
                      profile_picture: "https://unsplash.com/photos/a-view-of-a-mountain-range-in-the-desert-t3dlLOhdEzs"
                      member_role: 1
                    - user_id: "c3d4e5f6g7h8i9j0k1l2m3n4o5p6q7r"
                      user_name: "BRAINIAC77"
                      full_name: "Asif Azad"
                      profile_picture: "https://unsplash.com/photos/a-person-standing-on-a-beach-with-a-surfboard-RI5FdLjKAXU"
                      member_role: 2
        "401":
          description: Unauthorized Access
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NonAdminBoardAccessResponse"
        "404":
          description: Board not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NonExistentBoardResponse"
        "500":
          description: Internal Server Error
  /update-board-settings/{board-id}:
    put:
      summary: Update settings of a board, ownership transfer is through different API
      tags:
        - Board
      parameters:
        - name: board-id
          in: path
          description: ID of the board whose settings are to be updated
          required: true
          schema:
            type: integer
            example: 3
      requestBody:
        description: Board settings
        content:
          application/json:
            schema:
              allOf:
                - $ref: "#/components/schemas/BoardSettings"
              example:
                board_id: 2
                board_name: "Wazuh Research Project"
                board_description: "This board is created for coordination of the Wazuh research project"
                board_deadline: "2024-02-28T00:00:00.000Z"
      responses:
        "200":
          description: Board settings successfully updated
        "401":
          description: Unauthorized Access
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NonAdminBoardAccessResponse"
        "404":
          description: Board not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NonExistentBoardResponse"
        "500":
          description: Internal Server Error
  /add-member/{board-id}/{user-id}:
    post:
      summary: Add a member to a board
      tags:
        - Board
      parameters:
        - name: board-id
          in: path
          description: ID of the board to which the member is to be added
          required: true
          schema:
            type: integer
            example: 3
        - name: user-id
          in: path
          description: ID of the user to be added as a member
          required: true
          schema:
            type: string
            example: "c3d4e5f6g7h8i9j0k1l2m3n4o5p6q7r"
      responses:
        "200":
          description: Member successfully added
        "401":
          description: Unauthorized Access
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NonAdminBoardAccessResponse"
        "404":
          description: Board or user not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: Board or user not found
                  message:
                    type: string
                    example: The specified board ID or user ID does not exist
        "500":
          description: Internal Server Error
  /remove-member/{board-id}/{user-id}:
    delete:
      summary: Remove a member from a board, possible for only the owner of the board
      tags:
        - Board
      parameters:
        - name: board-id
          in: path
          description: ID of the board from which the member is to be removed
          required: true
          schema:
            type: integer
            example: 2
        - name: user-id
          in: path
          description: ID of the user to be removed as a member
          required: true
          schema:
            type: string
            example: "b1c2d3e4f5g6h7i8j9k0l1m2n3o4p5q"
      responses:
        "200":
          description: Member successfully removed
        "401":
          description: Unauthorized Access
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NonOwnerBoardAccessResponse"
        "404":
          description: Board or user not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: Board or user not found
                  message:
                    type: string
                    example: The specified board ID or user ID does not exist
        "500":
          description: Internal Server Error
  /update-board-access/{user-id}:
    put:
      summary: Update access of a member of a board, possible for only the owner of the board
      tags:
        - Board
      parameters:
        - name: user-id
          in: path
          description: ID of the user whose access is to be updated
          required: true
          schema:
            type: string
            example: "af3b4c5d6e7f8g9h0i1j2k3l4m5n6o7p"
      requestBody:
        description: Update access of a board for a member
        content:
          application/json:
            schema:
              type: object
              properties:
                member_role:
                  type: integer
                  example: 2
                  description: "1 - Owner, 2 - Admin, 3 - Member"
      responses:
        "200":
          description: Member access successfully updated
        "401":
          description: Unauthorized Access
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NonOwnerBoardAccessResponse"
        "404":
          description: User not a member of the board
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: User is not a member of the board
                  message:
                    type: string
                    example: The specified user is not a member of the board
        "500":
          description: Internal Server Error
  /create-board:
    post:
      summary: Create a new board
      tags:
        - Board
      requestBody:
        description: Board details
        content:
          application/json:
            schema:
              allOf:
                - $ref: "#/components/schemas/BoardSettings"
              example:
                board_name: "ISD Project | ExploreMate"
                board_description: "This board is created for coordination of the ISD project"
                board_deadline: "2023-12-05T00:00:00.000Z"
                board_members:
                  - user_id: "af3b4c5d6e7f8g9h0i1j2k3l4m5n6o7p"
                    user_name: "Sadat999"
                    member_role: 1
                  - user_id: "c3d4e5f6g7h8i9j0k1l2m3n4o5p6q7r"
                    user_name: "BRAINIAC77"
                    member_role: 2
                  - user_id: "d4e5f6g7h8i9j0k1l2m3n4o5p6q7r"
                    user_name: "shattik420"
                    member_role: 2
                  - user_id: "e5f6g7h8i9j0k1l2m3n4o5p6q7r8s9t"
                    user_name: "Tahmid-404"
                  - user_id: "f6g7h8i9j0k1l2m3n4o5p6q7r8s9t0u"
                    user_name: "shitdroid"
                  - user_id: "g7h8i9j0k1l2m3n4o5p6q7r8s9t0u1v"
                    user_name: "amirulislamalif"
      responses:
        "200":
          description: Board successfully created
          content:
            application/json:
              schema:
                type: object
                properties:
                  board_id:
                    type: integer
                    example: 5
                  board_name:
                    type: string
                    example: "ISD Project | ExploreMate"
                  created_at:
                    type: string
                    format: date-time
                    example: "2023-08-23T00:00:00.000Z"
        "400":
          description: Bad request - Invalid input
        "500":
          description: Internal Server Error
  /delete-board/{board-id}:
    delete:
      summary: Delete a board, only possible for the owner of the board
      tags:
        - Board
      parameters:
        - name: board-id
          in: path
          description: ID of the board to be deleted
          required: true
          schema:
            type: integer
            example: 3
      responses:
        "200":
          description: Board successfully deleted
        "401":
          description: Unauthorized Access
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NonOwnerBoardAccessResponse"
        "404":
          description: Board not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NonExistentBoardResponse"
        "500":
          description: Internal Server Error
  /get-lists/{board-id}:
    get:
      summary: Get all lists of a board along with minimal detail
      tags:
        - List
      parameters:
        - name: board-id
          in: path
          description: ID of the board whose lists are to be retrieved
          required: true
          schema:
            type: integer
            example: 3
      responses:
        "200":
          description: Lists successfully retrieved
          content:
            application/json:
              schema:
                type: array
                items:
                  allOf:
                    - $ref: "#/components/schemas/ListSummarizedForm"
                  example:
                    - list_id: 7
                      list_name: "Project Scope Presentation"
                      list_description: "The first week's assignment"
                      list_deadline: "2023-08-05T00:00:00.000Z"
                      list_overall_progress: 1.00
                    - list_id: 8
                      list_name: "BPMN Diagram"
                      list_description: "The second week's assignment"
                      list_deadline: "2023-08-19T00:00:00.000Z"
                      list_overall_progress: 1.00
                    - list_id: 9
                      list_name: "Mock UI Design"
                      list_description: "The third week's assignment"
                      list_deadline: "2023-09-03T00:00:00.000Z"
                      list_overall_progress: 1.00
                    - list_id: 10
                      list_name: "ERD & Class Diagram"
                      list_description: "The fourth week's assignment"
                      list_deadline: "2023-09-17T00:00:00.000Z"
                      list_overall_progress: 1.00
                    - list_id: 11
                      list_name: "Collaboration, Sequence & State Diagram"
                      list_description: "The fifth week's assignment"
                      list_deadline: "2023-09-30T00:00:00.000Z"
                      list_overall_progress: 1.00
                    - list_id: 12
                      list_name: "Partial Software Demonstration"
                      list_description: "The sixth week's assignment"
                      list_deadline: "2023-10-20T00:00:00.000Z"
                      list_overall_progress: 0.33
        "401":
          description: Unauthorized Access
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NonMemberBoardAccessResponse"
        "404":
          description: Board not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NonExistentBoardResponse"
        "500":
          description: Internal Server Error
  /add-list/{board-id}:
    post:
      summary: Add a list to a board
      tags:
        - List
      parameters:
        - name: board-id
          in: path
          description: ID of the board to which the list is to be added
          required: true
          schema:
            type: integer
            example: 4
      requestBody:
        description: List details
        content:
          application/json:
            schema:
              type: object
              properties:
                list_name:
                  type: string
                  example: "API & Architecture Presentation"
                list_description:
                  type: string
                  example: "This presentation will be required to finalize the APIs of TaskFlow"
                list_deadline:
                  type: string
                  example: "2024-01-23T00:00:00.000Z"
      responses:
        "200":
          description: List successfully added to board
          content:
            application/json:
              schema:
                type: object
                properties:
                  list_id:
                    type: integer
                    example: 12
                  list_name:
                    type: string
                    example: "API & Architecture Presentation"
        "401":
          description: Unauthorized Access
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NonAdminBoardAccessResponse"
        "404":
          description: Board not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NonExistentBoardResponse"
        "409":
          description: Conflicting Input
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: Invalid Input
                  message:
                    type: string
                    example: List deadline cannot be further than board deadline
        "500":
          description: Internal Server Error
  /delete-list/{list-id}:
    delete:
      summary: Delete a list from a board
      tags:
        - List
      parameters:
        - name: list-id
          in: path
          description: ID of the list to be deleted
          required: true
          schema:
            type: integer
            example: 8
      responses:
        "200":
          description: List successfully deleted
        "401":
          description: Unauthorized Access
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NonAdminListAccessResponse"
        "404":
          description: List not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NonExistentListResponse"
        "500":
          description: Internal Server Error
  /get-list-content/{list-id}:
    get:
      summary: Get the content of a list
      tags:
        - List
      parameters:
        - name: list-id
          in: path
          description: ID of the list whose content is to be retrieved
          required: true
          schema:
            type: integer
            example: 8
      responses:
        "200":
          description: List content successfully retrieved
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/ListStructure"
                example:
                  list_id: 8
                  list_name: "Mock UI Design"
                  list_tasks:
                    - task_id: 4
                      task_name: "Sketch the design in a meeting"
                      task_deadline: "2023-10-10T00:00:00.000Z"
                      task_label_color: "#F2A541"
                      task_overall_progress: 1.00
                    - task_id: 5
                      task_name: "Design the home page"
                      task_deadline: "2023-10-12T00:00:00.000Z"
                      task_label_color: "#F23A41"
                      task_overall_progress: 1.00
                    - task_id: 6
                      task_name: "Design the profile settings page"
                      task_deadline: "2023-10-14T00:00:00.000Z"
                      task_label_color: "#F2F541"
                      task_overall_progress: 1.00
                    - task_id: 7
                      task_name: "Design the board view page"
                      task_deadline: "2023-10-15T00:00:00.000Z"
                      task_label_color: "#F2F541"
                      task_overall_progress: 1.00
        "401":
          description: Unauthorized Access
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NonMemberListAccessResponse"
        "404":
          description: List not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NonExistentListResponse"
        "500":
          description: Internal Server Error
  /update-list-access/{list-id}/{member-id}:
    put:
      summary: Update access of a user in a list
      tags:
        - List
      parameters:
        - name: list-id
          in: path
          description: ID of the list whose member access is to be updated
          required: true
          schema:
            type: integer
            example: 8
        - name: member-id
          in: path
          description: Member ID of the user whose access is to be updated
          required: true
          schema:
            type: integer
            example: 12
      requestBody:
        description: Member access
        content:
          application/json:
            schema:
              type: object
              properties:
                member_role:
                  type: integer
                  example: 2
                  description: "1 - Owner, 2 - Admin, 3 - Viewer"
      responses:
        "200":
          description: Member access successfully updated
        "401":
          description: Unauthorized Access
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NonAdminListAccessResponse"
        "404":
          description: User or task list not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: User or task list not found
                  message:
                    type: string
                    example: The specified user ID or task list ID does not exist
        "500":
          description: Internal Server Error
  /get-list-settings/{list-id}:
    get:
      summary: Get settings of a list
      tags:
        - List
      parameters:
        - name: list-id
          in: path
          description: ID of the list whose settings are to be retrieved
          required: true
          schema:
            type: integer
            example: 8
      responses:
        "200":
          description: List settings successfully retrieved
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/ListSettings"
                example:
                  list_id: 8
                  list_name: "Mock UI Design"
                  list_description: "The second week's assignment"
                  list_deadline: "2023-10-17T00:00:00.000Z"
                  list_members:
                    - user_id: "af3b4c5d6e7f8g9h0i1j2k3l4m5n6o7p"
                      user_name: "Sadat999"
                      full_name: "Mohammad Sadat Hossain"
                      profile_picture: "https://unsplash.com/photos/a-long-exposure-photo-of-a-mountain-road-l2scWsGyq_U"
                      member_role: 1
                    - user_id: "c3d4e5f6g7h8i9j0k1l2m3n4o5p6q7r"
                      user_name: "BRAINIAC77"
                      full_name: "Asif Azad"
                      profile_picture: "https://unsplash.com/photos/a-person-standing-on-a-beach-with-a-surfboard-RI5FdLjKAXU"
                      member_role: 2
                    - user_id: "d4e5f6g7h8i9j0k1l2m3n4o5p6q7r"
                      user_name: "shattik420"
                      full_name: "Shattik Islam Rhythm"
                      profile_picture: "https://unsplash.com/photos/a-view-of-a-mountain-range-in-the-desert-t3dlLOhdEzs"
                      member_role: 2
                    - user_id: "e5f6g7h8i9j0k1l2m3n4o5p6q7r8s9t"
                      user_name: "Tahmid-404"
                      full_name: "Nafis Tahmid"
                      profile_picture: "https://unsplash.com/photos/an-aerial-view-of-a-desert-with-rocks-and-sand-4q87Z96NBYg"
                    - user_id: "f6g7h8i9j0k1l2m3n4o5p6q7r8s9t0u"
                      user_name: "shitdroid"
                      full_name: "Wasif Hamid"
                      profile_picture: "https://unsplash.com/photos/a-couple-of-lounge-chairs-sitting-next-to-a-swimming-pool-7XMl6DyEyGk"
                    - user_id: "g7h8i9j0k1l2m3n4o5p6q7r8s9t0u1v"
                      user_name: "amirulislamalif"
                      full_name: Amirul Islam Alif
                      profile_picture: "https://unsplash.com/photos/a-person-looking-out-from-a-cave-in-the-desert-9bE0LlCrX2M"
        "401":
          description: Unauthorized Access
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NonAdminListAccessResponse"
        "404":
          description: List not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NonExistentListResponse"
        "500":
          description: Internal Server Error
  /update-list-settings/{list-id}:
    put:
      summary: Update settings of a list
      tags:
        - List
      parameters:
        - name: list-id
          in: path
          description: ID of the list whose settings are to be updated
          required: true
          schema:
            type: integer
            example: 8
      requestBody:
        description: List settings
        content:
          application/json:
            schema:
              allOf:
                - $ref: "#/components/schemas/ListSettings"
              example:
                list_name: "Mock UI Design"
                list_description: "The second week's assignment"
                list_deadline: "2023-10-17T00:00:00.000Z"
      responses:
        "200":
          description: List settings successfully updated
        "401":
          description: Unauthorized Access
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NonAdminListAccessResponse"
        "404":
          description: List not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NonExistentListResponse"
        "409":
          description: Conflicting Input
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: Invalid Input
                  message:
                    type: string
                    example: List deadline cannot be further than board deadline
        "500":
          description: Internal Server Error
  /get-tasks/{list-id}:
    get:
      summary: Get all tasks of a list along with their minimal detail
      tags:
        - Task
      parameters:
        - name: list-id
          in: path
          description: ID of the task list whose tasks are to be retrieved
          required: true
          schema:
            type: integer
            example: 8
      responses:
        "200":
          description: Tasks successfully retrieved
          content:
            application/json:
              schema:
                type: array
                items:
                  allOf:
                    - $ref: "#/components/schemas/TaskSummarizedForm"
                example:
                  - task_id: 4
                    task_name: "Implement the dashboard page"
                    task_deadline: "2024-01-23T00:00:00.000Z"
                    task_label_color: "#F2A541"
                    task_overall_progress: 0.85
                  - task_id: 5
                    task_name: "Implement the profile settings page"
                    task_deadline: "2024-01-28T00:00:00.000Z"
                    task_label_color: "#F23A41"
                    task_overall_progress: 0.86
                  - task_id: 6
                    task_name: "Implement the notifications feature"
                    task_deadline: "2024-02-02T00:00:00.000Z"
                    task_label_color: "#F2F541"
                    task_overall_progress: 1.00
        "401":
          description: Unauthorized Access
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NonMemberListAccessResponse"
        "404":
          description: List not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NonExistentListResponse"
        "500":
          description: Internal Server Error
  /get-task-detail/{task-id}:
    get:
      summary: Get all details of a task
      tags:
        - Task
      parameters:
        - name: task-id
          in: path
          description: ID of the task whose details are to be retrieved
          required: true
          schema:
            type: integer
            example: 23
      responses:
        "200":
          description: Task details successfully retrieved
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/TaskDetail"
                example:
                  task_id: 12
                  task_name: "Implement the dashboard page"
                  task_description: "This is the page the user will see after logging in"
                  task_cover_photo: "https://unsplash.com/photos/a-couple-of-people-that-are-standing-in-the-grass--V_jGnufxTQ"
                  task_label_color: "#F2A541"
                  task_start_time: "2024-01-10T00:00:00.000Z"
                  task_deadline: "2024-01-23T00:00:00.000Z"
                  task_labels:
                    - label_id: 1
                      label_name: "new-feature"
                    - label_id: 2
                      label_name: "first-development"
                    - label_id: 3
                      label_name: "urgent"
                  task_assignees:
                    - user_id: "af3b4c5d6e7f8g9h0i1j2k3l4m5n6o7p"
                      user_name: "Sadat999"
                      profile_picture: "https://unsplash.com/photos/a-long-exposure-photo-of-a-mountain-road-l2scWsGyq_U"
                    - user_id: "c3d4e5f6g7h8i9j0k1l2m3n4o5p6q7r"
                      user_name: "amirulislamalif"
                      profile_picture: "https://unsplash.com/photos/a-person-looking-out-from-a-cave-in-the-desert-9bE0LlCrX2M"
                  task_checklist_items:
                    - item_id: 11
                      item_name: "Implement the top card"
                      item_status: false
                    - item_id: 12
                      item_name: "Implement the drawer"
                      item_status: true
                    - item_id: 13
                      item_name: "Add the navigation bar"
                      item_status: true
                    - item_id: 14
                      item_name: "Add responsiveness"
                      item_status: false
                    - item_id: 15
                      item_name: "Add animations"
                      item_status: false

        "401":
          description: Unauthorized Access
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NonMemberTaskAccessResponse"
        "404":
          description: Task not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NonExistentTaskResponse"
        "500":
          description: Internal Server Error
  /get-all-labels:
    get:
      summary: Get all labels across the application
      tags:
        - Task
      responses:
        "200":
          description: Labels successfully retrieved
          content:
            application/json:
              schema:
                type: array
                items:
                  allOf:
                    - $ref: "#/components/schemas/TaskLabel"
                  example:
                    - label_id: 1
                      label_name: "new-feature"
                    - label_id: 2
                      label_name: "first-development"
                    - label_id: 3
                      label_name: "urgent"
                    - label_id: 4
                      label_name: "bugfix"
                    - label_id: 5
                      label_name: "feature-release"
                    - label_id: 6
                      label_name: "documentation"
                    - label_id: 7
                      label_name: "enhancement"
        "500":
          description: Internal Server Error
  /add-label:
    post:
      summary: If user chooses to add a new label yet to be created, this operation adds the label to global database.
      tags:
        - Task
      requestBody:
        description: Label details
        content:
          application/json:
            schema:
              type: object
              properties:
                label_name:
                  type: string
                  example: "leisure-activity"
      responses:
        "200":
          description: Label successfully added to application
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/TaskLabel"
                example:
                  label_id: 8
                  label_name: "leisure-activity"
        "400":
          description: Bad request - Invalid input
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: Invalid Input
                  message:
                    type: string
                    example: Label with this name already exists
        "500":
          description: Internal Server Error
  /update-checklist/{task-id}:
    put:
      summary: Update checklist of a task (add, remove, update items).
      description: item_id of any newly added item is null.
      tags:
        - Task
      parameters:
        - name: task-id
          in: path
          description: ID of the task whose checklist is to be updated
          required: true
          schema:
            type: integer
            example: 32
      requestBody:
        description: Checklist details
        content:
          application/json:
            schema:
              type: object
              properties:
                checklist_items:
                  type: array
                  items:
                    allOf:
                      - $ref: "#/components/schemas/ChecklistItem"
                  example:
                    - item_id: 11
                      item_name: "Implement the top card"
                      item_status: false
                    - item_id: 12
                      item_name: "Implement the drawer"
                      item_status: true
                    - item_id: 13
                      item_name: "Add the navigation bar"
                      item_status: true
                    - item_id: 14
                      item_name: "Add responsiveness"
                      item_status: true
                    - item_id: 15
                      item_name: "Add animations"
                      item_status: true
                    - item_id: null
                      item_name: "Newly added item"
                      item_status: false
      responses:
        "200":
          description: Checklist successfully updated
        "400":
          description: Bad request - Invalid input
        "401":
          description: Unauthorized Access
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NonAdminTaskAccessResponse"
        "404":
          description: Task not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NonExistentTaskResponse"
        "500":
          description: Internal Server Error
  /update-task-detail/{task-id}:
    put:
      summary: Update details of a task (name, description, color, time, label)
      tags:
        - Task
      parameters:
        - name: task-id
          in: path
          description: ID of the task whose details are to be updated
          required: true
          schema:
            type: integer
            example: 32
      requestBody:
        description: Task details
        content:
          application/json:
            schema:
              allOf:
                - $ref: "#/components/schemas/TaskDetail"
              example:
                task_name: "Implement the dashboard page"
                task_description: "This is the page the user will see after logging in"
                task_cover_photo: "https://unsplash.com/photos/a-very-tall-building-with-a-neon-sign-on-its-side-UgYx9ciFoAI"
                task_label_color: "#F2A541"
                task_start_time: "2024-01-10T00:00:00.000Z"
                task_deadline: "2024-02-23T00:00:00.000Z"
                task_labels:
                  - label_id: 1
                    label_name: "new-feature"
                  - label_id: 2
                    label_name: "first-development"
                  - label_id: 3
                    label_name: "urgent"
                  - label_id: 4
                    label_name: "experimental"
      responses:
        "200":
          description: Task details successfully updated
        "400":
          description: Bad request - Invalid input
        "401":
          description: Unauthorized Access
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NonAdminTaskAccessResponse"
        "404":
          description: Task not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NonExistentTaskResponse"
        "500":
          description: Internal Server Error
  /update-task-cover-photo/{task-id}:
    put:
      summary: Update cover photo of a task
      tags:
        - Task
      parameters:
        - name: task-id
          in: path
          description: ID of the task whose cover photo is to be updated
          required: true
          schema:
            type: integer
            example: 19
      requestBody:
        description: Task cover photo
        content:
          application/json:
            schema:
              type: object
              properties:
                task_cover_photo:
                  type: object
                  format: binary
                  description: The image file to be uploaded
      responses:
        "200":
          description: Task cover photo successfully updated
        "400":
          description: Bad request - Invalid input
        "401":
          description: Unauthorized Access
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NonAdminTaskAccessResponse"
        "404":
          description: Task not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NonExistentTaskResponse"
        "500":
          description: Internal Server Error
  /update-task-access/{task-id}/{member-id}:
    put:
      summary: Update access of a user in a task
      tags:
        - Task
      parameters:
        - name: task-id
          in: path
          description: ID of the task whose member access is to be updated
          required: true
          schema:
            type: integer
            example: 33
        - name: member-id
          in: path
          description: Member ID of the user whose access is to be updated
          required: true
          schema:
            type: integer
            example: 12
      requestBody:
        description: Member access
        content:
          application/json:
            schema:
              type: object
              properties:
                member_role:
                  type: integer
                  example: 2
                  description: "1 - Owner, 2 - Assigned, 3 - Viewer"
      responses:
        "200":
          description: Member access successfully updated
        "401":
          description: Unauthorized Access
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NonAdminTaskAccessResponse"
        "404":
          description: User or task not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: User or task not found
                  message:
                    type: string
                    example: The specified user ID or task ID does not exist
        "500":
          description: Internal Server Error
  /get-messages/{task-id}:
    post:
      summary: Get messages of a task, including field for how many messages to retrieve
      tags:
        - Task
      parameters:
        - name: task-id
          in: path
          description: ID of the task whose messages are to be retrieved
          required: true
          schema:
            type: integer
            example: 33
      requestBody:
        description: Message details
        content:
          application/json:
            schema:
              type: object
              properties:
                n_messages:
                  type: integer
                  default: 15
                  example: 7
                offset:
                  type: integer
                  example: 0
                  description: The offset is from the latest message
      responses:
        "200":
          description: Messages successfully retrieved
          content:
            application/json:
              schema:
                type: array
                items:
                  allOf:
                    - $ref: "#/components/schemas/TaskMessage"
                  example:
                    - message_id: 1
                      message_sender: "Sadat999"
                      message_sender_dp: "https://unsplash.com/photos/a-long-exposure-photo-of-a-mountain-road-l2scWsGyq_U"
                      message_time: "2023-08-05T00:00:00.000Z"
                      message_content: "Hello there, we are expected to write an essay on the topic of 'The Importance of Time Management'. Can you help me get started?"
                      message_attachment: null
                    - message_id: 2
                      message_sender: "Copilot"
                      message_sender_dp: "https://unsplash.com/photos/a-person-standing-on-a-beach-with-a-surfboard-RI5FdLjKAXU"
                      message_time: "2023-08-05T00:01:00.000Z"
                      message_content: "Sure, I can help you with that. I will send you a few links to get you started."
                      message_attachment: null
                    - message_id: 3
                      message_sender: "Copilot"
                      message_sender_dp: "https://unsplash.com/photos/a-person-standing-on-a-beach-with-a-surfboard-RI5FdLjKAXU"
                      message_time: "2023-08-05T00:02:00.000Z"
                      message_content: "Here is what I have collected so far:"
                      message_attachment: "https://docs.google.com/document/d/1QdVDEpuk3wWCYST3jtu8mQl4KRp-WEFnbb5EdfWho9M/edit#heading=h.kv9b945ft277"
                    - message_id: 4
                      message_sender: "Sadat999"
                      message_sender_dp: "https://unsplash.com/photos/a-long-exposure-photo-of-a-mountain-road-l2scWsGyq_U"
                      message_time: "2023-08-05T00:03:00.000Z"
                      message_content: "Thanks!"
                      message_attachment: null
                    - message_id: 5
                      message_sender: "Copilot"
                      message_sender_dp: "https://unsplash.com/photos/a-person-standing-on-a-beach-with-a-surfboard-RI5FdLjKAXU"
                      message_time: "2023-08-07T00:04:00.000Z"
                      message_content: "Hey long time no see! How is the essay going?"
                      message_attachment: null
                    - message_id: 6
                      message_sender: "BRAINIAC77"
                      message_sender_dp: "https://unsplash.com/photos/a-couple-of-lounge-chairs-sitting-next-to-a-swimming-pool-7XMl6DyEyGk"
                      message_time: "2023-08-07T00:05:00.000Z"
                      message_content: "The first part is done. I am tasked with the concluding phase, kind of stuck there. Can you help me?"
                      message_attachment: "https://docs.google.com/document/d/1XZORNVNbQOewGd2vE7fdzuG4RDa7cxVcoVj5pld8p20/edit?usp=sharing"
                    - message_id: 7
                      message_sender: "Copilot"
                      message_sender_dp: "https://unsplash.com/photos/a-person-standing-on-a-beach-with-a-surfboard-RI5FdLjKAXU"
                      message_time: "2023-08-07T00:06:00.000Z"
                      message_content: "Sure, I am taking a look at it right now."
        "400":
          description: Bad request - Invalid input
        "401":
          description: Unauthorized Access
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NonMemberTaskAccessResponse"
        "404":
          description: Task not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NonExistentTaskResponse"
        "500":
          description: Internal Server Error
  /send-message/{task-id}:
    post:
      summary: Send a message on a task
      tags:
        - Task
      parameters:
        - name: task-id
          in: path
          description: ID of the task to which the message is to be sent
          required: true
          schema:
            type: integer
            example: 35
      requestBody:
        description: Message details
        content:
          application/json:
            schema:
              allOf:
                - $ref: "#/components/schemas/TaskMessage"
              example:
                message_content: "Hello can you check this work?"
                message_attachment: "https://upload.wikimedia.org/wikipedia/commons/6/64/Expressjs.png"
      responses:
        "200":
          description: Message successfully sent
          content:
            application/json:
              schema:
                type: object
                properties:
                  message_id:
                    type: integer
                    example: 32
                  message_sender:
                    type: string
                    example: "Sadat999"
                  message_time:
                    type: string
                    format: date-time
                    example: "2023-08-05T00:00:00.000Z"
        "400":
          description: Bad request - Invalid input
        "401":
          description: Unauthorized Access
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: Unauthorized Access
                  message:
                    type: string
                    example: You do not have messaging access on this task
        "404":
          description: Task not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NonExistentTaskResponse"
        "500":
          description: Internal Server Error
  /get-comments/{task-id}:
    post:
      summary: Get comments of a task, including field for how many comments to retrieve
      tags:
        - Task
      parameters:
        - name: task-id
          in: path
          description: ID of the task whose comments are to be retrieved
          required: true
          schema:
            type: integer
            example: 33
      requestBody:
        description: Comment details
        content:
          application/json:
            schema:
              type: object
              properties:
                n_comments:
                  type: integer
                  default: 15
                  example: 7
                offset:
                  type: integer
                  example: 0
                  description: The offset is from the latest comment
      responses:
        "200":
          description: Comments successfully retrieved
          content:
            application/json:
              schema:
                type: array
                items:
                  allOf:
                    - $ref: "#/components/schemas/TaskComment"
                  example:
                    - comment_id: 1
                      comment_text: "Beautify the left sidebar"
                      commenter_username: "risenfromashes"
                      commenter_dp: "https://unsplash.com/photos/a-long-exposure-photo-of-a-mountain-road-l2scWsGyq_U"
                      comment_time: "2023-08-05T00:00:00.000Z"
                    - comment_id: 2
                      comment_text: "Add responsiveness"
                      commenter_username: "BRAINIAC77"
                      commenter_dp: "https://unsplash.com/photos/a-couple-of-lounge-chairs-sitting-next-to-a-swimming-pool-7XMl6DyEyGk"
                      comment_time: "2023-08-06T12:01:00.000Z"
                    - comment_id: 3
                      comment_text: "Nice modal!"
                      commenter_username: "shattik420"
                      commenter_dp: "https://unsplash.com/photos/a-view-of-a-mountain-range-in-the-desert-t3dlLOhdEzs"
                      comment_time: "2023-08-09T12:02:00.000Z"
        "400":
          description: Bad request - Invalid input
        "401":
          description: Unauthorized Access
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NonMemberTaskAccessResponse"
        "404":
          description: Task not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NonExistentTaskResponse"
        "500":
          description: Internal Server Error
  /add-comment/{task-id}:
    post:
      summary: Add a comment on a task
      tags:
        - Task
      parameters:
        - name: task-id
          in: path
          description: ID of the task to which the comment is to be added
          required: true
          schema:
            type: integer
            example: 35
      requestBody:
        description: Comment details
        content:
          application/json:
            schema:
              type: object
              properties:
                comment_text:
                  type: string
                  example: "I think it would be better if we use a different color for the sidebar"
      responses:
        "200":
          description: Comment successfully added
          content:
            application/json:
              schema:
                type: object
                properties:
                  comment_id:
                    type: integer
                    example: 32
                  commenter_username:
                    type: string
                    example: "Sadat999"
                  comment_time:
                    type: string
                    format: date-time
                    example: "2023-08-05T00:00:00.000Z"
        "400":
          description: Bad request - Invalid input
        "401":
          description: Unauthorized Access
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: Unauthorized Access
                  message:
                    type: string
                    example: You do not have commenting access on this task
        "404":
          description: Task not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NonExistentTaskResponse"
        "500":
          description: Internal Server Error
  /get-sorted-tasks:
    get:
      summary: Get all pending tasks assigned to the authenticated user sorted by ranking algorithm
      tags:
        - Task
      responses:
        "200":
          description: Tasks successfully retrieved
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/TaskSummarizedForm"
                example:
                  - task_id: 33
                    task_name: "Finalize the API documentation"
                    task_deadline: "2024-01-14T00:00:00.000Z"
                  - task_id: 16
                    task_name: "Finish Rasterization Offline"
                    task_deadline: "2024-01-23T00:00:00.000Z"
                  - task_id: 19
                    task_name: "Start Researching on Wazuh"
                    task_deadline: "2024-01-30T00:00:00.000Z"
                  - task_id: 12
                    task_name: "Study for Security CT"
                    task_deadline: "2024-01-16T00:00:00.000Z"
                  - task_id: 18
                    task_name: "Study divine economics"
                    task_deadline: "2024-01-17T00:00:00.000Z"
        "500":
          description: Internal Server Error
  /get-notifications:
    post:
      summary: Get all notifications of the authenticated user, having fields for how many notifications to retrieve
      tags:
        - Notification
      requestBody:
        description: Notification details
        content:
          application/json:
            schema:
              type: object
              properties:
                n_notifications:
                  type: integer
                  example: 10
                offset:
                  type: integer
                  example: 0
                  description: The offset is from the latest notification
                get_all_unread:
                  type: boolean
                  example: false
                  description: If true, all unread notifications will be retrieved, regardless of the value of n_notifications and offset
      responses:
        "200":
          description: Notifications successfully retrieved
          content:
            application/json:
              schema:
                type: array
                items:
                  allOf:
                    - $ref: "#/components/schemas/Notification"
                  example:
                    - notification_id: 11
                      notification_content: "You have been assigned the task 'Implement the dashboard page'"
                      notification_time: "2023-08-05T00:00:00.000Z"
                      notification_url_1: "https://taskflow-express-api.vercel.app/tasks/32"
                      notification_url_2: null
                      notification_read: false
                    - notification_id: 12
                      notification_content: "You have been assigned the task 'Implement the profile settings page'"
                      notification_time: "2023-08-08T00:00:00.000Z"
                      notification_url_1: "https://taskflow-express-api.vercel.app/tasks/33"
                      notification_url_2: null
                      notification_read: false
                    - notification_id: 23
                      notification_content: "You have been added to the board 'Computer Graphics Ray Tracing Project'"
                      notification_time: "2023-08-09T00:00:00.000Z"
                      notification_url_1: "https://taskflow-express-api.vercel.app/boards/12"
                      notification_url_2: null
                      notification_read: false
        "400":
          description: Bad request - Invalid input
        "500":
          description: Internal Server Error
  # this operation should be enhanced, instead of sending the userlist from the frontend, the backend should rather find out.
  /add-notification:
    post:
      summary: Add a notification to the authenticated user
      tags:
        - Notification
      requestBody:
        description: Notification details
        content:
          application/json:
            schema:
              allOf:
                - $ref: "#/components/schemas/Notification"
              example:
                notifiable_people:
                  - user_id: "af3b4c5d6e7f8g9h0i1j2k3l4m5n6o7p"
                    user_name: "Sadat999"
                    profile_picture: "https://unsplash.com/photos/a-long-exposure-photo-of-a-mountain-road-l2scWsGyq_U"
                  - user_id: "c3d4e5f6g7h8i9j0k1l2m3n4o5p6q7r"
                    user_name: "amirulislamalif"
                    profile_picture: "https://unsplash.com/photos/a-person-looking-out-from-a-cave-in-the-desert-9bE0LlCrX2M"
                notification_content: "The deadline of the task 'Rasterization Assignment' has been updated to 09 August 2023 12:00 AM"
                notification_url_1: "https://taskflow-express-api.vercel.app/tasks/16"
                notification_url_2: null
      responses:
        "200":
          description: Notification successfully added
          content:
            application/json:
              schema:
                type: object
                properties:
                  notification_id:
                    type: integer
                    example: 25
                  notification_time:
                    type: string
                    format: date-time
                    example: "2023-08-05T00:00:00.000Z"
        "400":
          description: Bad request - Invalid input
        "500":
          description: Internal Server Error
  /mark-notification-as-read/{user-id}/{notification-id}:
    put:
      summary: Mark a notification as read
      tags:
        - Notification
      parameters:
        - name: user-id
          in: path
          description: ID of the user whose notification is to be marked as read
          required: true
          schema:
            type: string
            example: "af3b4c5d6e7f8g9h0i1j2k3l4m5n6o7p"
        - name: notification-id
          in: path
          description: ID of the notification to be marked as read
          required: true
          schema:
            type: integer
            example: 23
      responses:
        "200":
          description: Notification successfully marked as read
        "400":
          description: Bad request - Invalid input
        "404":
          description: Notification not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: Notification not found
                  message:
                    type: string
                    example: No such notification found for the specified user
        "500":
          description: Internal Server Error
  /get-overview-data:
    get:
      summary: Get overview data of the authenticated user
      tags:
        - Insights
      responses:
        "200":
          description: Overview data successfully retrieved
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/OverviewData"
                example:
                  tasks_due_today: 2
                  tasks_due_this_week: 5
                  tasks_due_this_month: 12
                  tasks_completed_today: 1
                  tasks_completed_this_week: 3
                  tasks_completed_this_month: 8
                  tasks_overdue: 4
                  tasks_not_started: 3
                  tasks_in_progress: 5
                  tasks_completed: 10
                  active_board_count: 2
        "500":
          description: Internal Server Error
  /get-weekly-task-completion-data:
    post:
      summary: Get weekly task completion data for the authenticated user
      tags:
        - Insights
      requestBody:
        description: Date range
        content:
          application/json:
            schema:
              type: object
              properties:
                start_date:
                  type: string
                  format: date
                  example: "2023-08-01"
                end_date:
                  type: string
                  format: date
                  example: "2023-09-24"
      responses:
        "200":
          description: Weekly data successfully retrieved
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/WeeklyData"
                example:
                  - start_date: "2023-08-01"
                    end_date: "2023-08-07"
                    tasks_completed: 3
                  - start_date: "2023-08-08"
                    end_date: "2023-08-14"
                    tasks_completed: 5
                  - start_date: "2023-08-15"
                    end_date: "2023-08-21"
                    tasks_completed: 7
                  - start_date: "2023-08-22"
                    end_date: "2023-08-28"
                    tasks_completed: 9
                  - start_date: "2023-08-29"
                    end_date: "2023-09-04"
                    tasks_completed: 11
                  - start_date: "2023-09-05"
                    end_date: "2023-09-11"
                    tasks_completed: 13
                  - start_date: "2023-09-12"
                    end_date: "2023-09-18"
                    tasks_completed: 15
                  - start_date: "2023-09-19"
                    end_date: "2023-09-24"
                    tasks_completed: 1
        "400":
          description: Bad request - Invalid input
        "500":
          description: Internal Server Error
  /get-task-progress-state:
    get:
      summary: Get task progress state of the authenticated user
      tags:
        - Insights
      responses:
        "200":
          description: Task progress state successfully retrieved
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/TaskProgressState"
                example:
                  - start_threshold: 0
                    end_threshold: 0.20
                    label: "Poor Progress"
                    task_count: 9
                  - start_threshold: 0.20
                    end_threshold: 0.40
                    label: "Average Progress"
                    task_count: 12
                  - start_threshold: 0.40
                    end_threshold: 0.60
                    label: "Good Progress"
                    task_count: 8
                  - start_threshold: 0.60
                    end_threshold: 0.80
                    label: "Great Progress"
                    task_count: 5
                  - start_threshold: 0.80
                    end_threshold: 1
                    label: "Excellent Progress"
                    task_count: 3
        "500":
          description: Internal Server Error
  /get-daily-task-completion-data:
    post:
      summary: Get daily data of task completion for the authenticated user
      tags:
        - Insights
      requestBody:
        description: Date range
        content:
          application/json:
            schema:
              type: object
              properties:
                start_date:
                  type: string
                  format: date
                  example: "2023-08-01"
                end_date:
                  type: string
                  format: date
                  example: "2023-08-18"
      responses:
        "200":
          description: Daily data successfully retrieved
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/DailyData"
                example:
                  - date: "2023-08-01"
                    tasks_completed: 3
                  - date: "2023-08-02"
                    tasks_completed: 5
                  - date: "2023-08-03"
                    tasks_completed: 7
                  - date: "2023-08-04"
                    tasks_completed: 9
                  - date: "2023-08-05"
                    tasks_completed: 11
                  - date: "2023-08-06"
                    tasks_completed: 13
                  - date: "2023-08-07"
                    tasks_completed: 15
                  - date: "2023-08-08"
                    tasks_completed: 1
                  - date: "2023-08-09"
                    tasks_completed: 3
                  - date: "2023-08-10"
                    tasks_completed: 5
                  - date: "2023-08-11"
                    tasks_completed: 7
                  - date: "2023-08-12"
                    tasks_completed: 9
                  - date: "2023-08-13"
                    tasks_completed: 11
                  - date: "2023-08-14"
                    tasks_completed: 13
                  - date: "2023-08-15"
                    tasks_completed: 15
                  - date: "2023-08-16"
                    tasks_completed: 1
                  - date: "2023-08-17"
                    tasks_completed: 3
                  - date: "2023-08-18"
                    tasks_completed: 5
        "400":
          description: Bad request - Invalid input
        "500":
          description: Internal Server Error
components:
  schemas:
    RegistrationInformation:
      type: object
      properties:
        first_name:
          type: string
          example: "Asif"
        middle_name:
          type: string
          example: ""
        last_name:
          type: string
          example: "Azad"
        user_name:
          type: string
          example: "BRAINIAC77"
        email_address:
          type: string
          format: email
          example: "brainiac2677@gmail.com"
        phone_number:
          type: string
          example: "01712345678"
        password:
          type: string
          format: password
          example: "78LqSa6dFA9"
          description: Password will be hashed before sending to the server
    UserPublicProfileResponse:
      type: object
      properties:
        user_id:
          type: string
          example: "af3b4c5d6e7f8g9h0i1j2k3l4m5n6o7p"
        full_name:
          type: string
          example: "Mohammad Sadat Hossain"
        user_name:
          type: string
          example: "Sadat999"
        email_address:
          type: string
          format: email
          example: "sadatho2014@gmail.com"
        phone_number:
          type: string
          example: "01732145678"
        profile_picture:
          type: string
          format: url
          example: "https://unsplash.com/photos/a-man-sitting-on-a-rock-in-the-desert-ud9NlvvEzUI"
        bio:
          type: string
          example: "I am a software engineer"
        task_completion_rate:
          type: number
          format: number
          description: Percentage of tasks completed out of all tasks assigned to the user
          example: 0.75
        task_completion_count:
          type: integer
          example: 5
        longest_streak:
          type: integer
          description: Longest streak of consecutive days with at least one task completed
          example: 13
    UserProfileSettings:
      type: object
      properties:
        user_id:
          type: string
        first_name:
          type: string
        middle_name:
          type: string
        last_name:
          type: string
        user_name:
          type: string
        password:
          type: string
        phone_number:
          type: string
        email_address:
          type: string
          format: email
        bio:
          type: string
    MemberMinimalRepresentation:
      type: object
      properties:
        user_id:
          type: string
        user_name:
          type: string
        full_name:
          type: string
        profile_picture:
          type: string
          format: url
        member_role:
          type: integer
          description: "1 - Owner, 2 - Admin, 3 - Member/Viewer"
    ListSummarizedForm:
      type: object
      properties:
        list_id:
          type: integer
        list_name:
          type: string
        list_description:
          type: string
        list_deadline:
          type: string
          format: date-time
        list_overall_progress:
          type: number
          format: number
          # description: Percentage of tasks completed out of all tasks in the list
    ListSettings:
      type: object
      properties:
        list_id:
          type: integer
        list_name:
          type: string
        list_description:
          type: string
        list_deadline:
          type: string
          format: date-time
        list_members:
          $ref: "#/components/schemas/MemberMinimalRepresentation"
    BoardSummarizedForm:
      type: object
      properties:
        board_id:
          type: integer
        board_name:
          type: string
        board_description:
          type: string
        created_at:
          type: string
          format: date-time
        board_deadline:
          type: string
          format: date-time
        board_owner:
          type: string
          description: User name of the board owner
        board_overall_progress:
          type: number
          format: number
          description: Percentage of tasks completed out of all tasks in the board
    BoardSettings:
      type: object
      properties:
        board_id:
          type: integer
        board_name:
          type: string
        board_description:
          type: string
        board_owner:
          type: string
          description: User name of the board owner
        board_deadline:
          type: string
          format: date-time
        board_members:
          $ref: "#/components/schemas/MemberMinimalRepresentation"
    BoardContent:
      type: object
      properties:
        board_id:
          type: integer
        board_name:
          type: string
        board_lists:
          type: array
          items:
            $ref: "#/components/schemas/ListStructure"
    ListStructure:
      type: object
      properties:
        list_id:
          type: integer
        list_name:
          type: string
        list_tasks:
          type: array
          items:
            $ref: "#/components/schemas/TaskSummarizedForm"
    TaskSummarizedForm:
      type: object
      properties:
        task_id:
          type: integer
        task_name:
          type: string
        task_deadline:
          type: string
          format: date-time
        task_label_color:
          type: string
        task_overall_progress:
          type: number
          format: number
          # description: Percentage of checklist items completed out of all checklist items in the task
    TaskLabel:
      type: object
      properties:
        label_id:
          type: integer
        label_name:
          type: string
    TaskAssignee:
      type: object
      properties:
        user_id:
          type: string
        user_name:
          type: string
        profile_picture:
          type: string
          format: url
    ChecklistItem:
      type: object
      properties:
        item_id:
          type: integer
        item_name:
          type: string
        item_status:
          type: boolean
    TaskDetail:
      type: object
      properties:
        task_id:
          type: integer
        task_name:
          type: string
        task_description:
          type: string
        task_cover_photo:
          type: string
          format: url
        task_label_color:
          type: string
        task_start_time:
          type: string
          format: date-time
        task_deadline:
          type: string
          format: date-time
        task_labels:
          type: array
          items:
            $ref: "#/components/schemas/TaskLabel"
        task_assignees:
          type: array
          items:
            $ref: "#/components/schemas/TaskAssignee"
        task_checklist_items:
          type: array
          items:
            $ref: "#/components/schemas/ChecklistItem"
    TaskMessage:
      type: object
      properties:
        message_id:
          type: integer
        message_text:
          type: string
        message_sender:
          type: string
          description: User name of the message sender
        message_sender_dp:
          type: string
          format: url
          description: URL of the message sender's profile picture
        message_time:
          type: string
          format: date-time
        message_attachment:
          type: string
          format: url
          description: URL of the attachment, can be null
    TaskComment:
      type: object
      properties:
        comment_id:
          type: integer
        comment_text:
          type: string
        commenter_username:
          type: string
          description: User name of the comment sender
        commenter_dp:
          type: string
          format: url
          description: URL of the comment sender's profile picture
        comment_time:
          type: string
          format: date-time
    OverviewData:
      type: object
      properties:
        tasks_due_today:
          type: integer
        tasks_due_this_week:
          type: integer
        tasks_due_this_month:
          type: integer
        tasks_completed_today:
          type: integer
        tasks_completed_this_week:
          type: integer
        tasks_completed_this_month:
          type: integer
        tasks_overdue:
          type: integer
        tasks_not_started:
          type: integer
        tasks_in_progress:
          type: integer
        tasks_completed:
          type: integer
        active_board_count:
          type: integer
    WeeklyData:
      type: array
      items:
        type: object
        properties:
          start_date:
            type: string
            format: date
          end_date:
            type: string
            format: date
          tasks_completed:
            type: integer
    TaskProgressState:
      type: array
      items:
        type: object
        properties:
          start_threshold:
            type: number
          end_threshold:
            type: number
          label:
            type: string
          task_count:
            type: integer
    DailyData:
      type: array
      items:
        type: object
        properties:
          date:
            type: string
            format: date
          completed_task_count:
            type: integer
    Notification:
      type: object
      properties:
        notification_id:
          type: integer
        notification_content:
          type: string
        notification_time:
          type: string
          format: date-time
        notification_url_1:
          type: string
          format: url
          description: URL of the first link, can be null
        notification_url_2:
          type: string
          format: url
          description: URL of the second link, can be null
        notification_read:
          type: boolean
    NonExistentUserResponse:
      type: object
      properties:
        error:
          type: string
          example: User not found
        message:
          type: string
          example: No user found with the specified user ID
    NonExistentBoardResponse:
      type: object
      properties:
        error:
          type: string
          example: Board not found
        message:
          type: string
          example: No board found with the specified board ID
    NonExistentListResponse:
      type: object
      properties:
        error:
          type: string
          example: List not found
        message:
          type: string
          example: No list found with the specified list ID
    NonExistentTaskResponse:
      type: object
      properties:
        error:
          type: string
          example: Task not found
        message:
          type: string
          example: No task found with the specified task ID
    NonOwnerBoardAccessResponse:
      type: object
      properties:
        error:
          type: string
          example: Unauthorized
        message:
          type: string
          example: You do not have owner access to this board
    NonAdminBoardAccessResponse:
      type: object
      properties:
        error:
          type: string
          example: Unauthorized
        message:
          type: string
          example: You do not have admin access to this board
    NonMemberBoardAccessResponse:
      type: object
      properties:
        error:
          type: string
          example: Unauthorized
        message:
          type: string
          example: You do not have view access to this board
    NonMemberListAccessResponse:
      type: object
      properties:
        error:
          type: string
          example: Unauthorized
        message:
          type: string
          example: You do not have view access to this list
    NonAdminListAccessResponse:
      type: object
      properties:
        error:
          type: string
          example: Unauthorized
        message:
          type: string
          example: You do not have admin access to this list
    NonMemberTaskAccessResponse:
      type: object
      properties:
        error:
          type: string
          example: Unauthorized
        message:
          type: string
          example: You do not have view access to this task
    NonAdminTaskAccessResponse:
      type: object
      properties:
        error:
          type: string
          example: Unauthorized
        message:
          type: string
          example: You do not have admin access to this task
