openapi: 3.0.3
info:
  title: TaskFlow API & Architecture Documentation
  description: |
    ## Introduction
    TaskFlow is an innovative task manager assistant with an automated UI agent designed to streamline productivity and reduce procrastination, inspired from [CatAlyst: Domain-Extensible Intervention for Preventing Task Procrastination Using Large Generative Models](https://arxiv.org/abs/2302.05678). Through its intelligent features, TaskFlow helps users organize their life, providing a seamless interface for managing both personal and professional tasks.

    ## Key Features
    1. **AI-Driven Task Management**: Integrates artificial intelligence to analyze task progress, and then offer further assistance to resume the task. This saves users from being stuck at a point in any task. The AI agent serves as an initiator, guiding users to overcome procrastination tendencies and manage tasks effectively.
    2. **Content Generation**: The AI agent mentioned earlier will help the users in carrying on their tasks by generating relevant contents. These contents will be continuation of the progress the user has already made in the respective task. Primarily, these contents are going to be textual contents.
    3. **Intelligent Task Scheduling**: Leverages sophisticated algorithms to dynamically schedule tasks based on user preferences, deadlines, and historical productivity data. This assists in optimizing daily routines and reduces the overwhelm of task management.
    4. **Effective Task Reminders**: Thanks to the in-house algorithm for task scheduling, TaskFlow gives timely reminders to users to resume or initiate a task before it gets too late. To add to the blessing, TaskFlow not only gives reminders, but also provided some initiating help to get things going on.
    5. **Statistical Analysis**: Provides detailed analytics on user performance and task completion trends. These insights enable users to understand their productivity patterns and make data-driven adjustments to their schedules.
    6. **Project Management**: TaskFlow is not solely confined to individual task management. Its horizon can be expanded across teams or even bigger entities for management of projects. Different members of the team can have respective roles and corresponding access to the different features of the task-boards.


    ## Incremental Features
    1. **Progress Sharing**: Users can share their achievements of obtaining a milestone or completing a task on popular social media platforms before their friends and family.
    2. **Non-textual Content Generation**: Although primarily TaskFlow aims to offer textual contents, it can later expand to image or other types of contents as well.


    ## Technology Stack
    - **Svelte (Frontend)**: Chosen for its innovative approach to frontend development, ensuring a responsive and interactive user interface with minimal overhead.
    <p align='center'><img src="https://upload.wikimedia.org/wikipedia/commons/thumb/1/1b/Svelte_Logo.svg/1200px-Svelte_Logo.svg.png" alt="Svelte" width="135" height="195"></p>

    - **ExpressJS (Backend)**: Selected for its efficiency in handling multiple requests simultaneously, providing a robust and scalable backend solution.
    <p align='center'><img src="https://upload.wikimedia.org/wikipedia/commons/6/64/Expressjs.png" alt="Express.js" width="271" height="114"></p>

    - **PostgreSQL (Database)**: Preferred for its advanced features in handling complex queries and large datasets, ensuring data integrity and performance.
    <p align='center'><img src="https://upload.wikimedia.org/wikipedia/commons/thumb/2/29/Postgresql_elephant.svg/1024px-Postgresql_elephant.svg.png" alt="PostgreSQL" width="169" height="205"></p>

    ## System Architecture : Monolithic
    For TaskFlow, a monolithic architecture was deemed most suitable due to several reasons:
    - **Simplicity in Development and Deployment**: In the initial stages, a monolithic architecture simplifies the development process by allowing a single, unified code base, which is easier to develop, test, and deploy.
    - **Performance Considerations**: Given the nature of TaskFlow, which requires seamless interaction between different features, a monolithic architecture ensures better performance through tightly integrated components.
    - **Project Scale and Complexity**: For the current scope and complexity of TaskFlow, a monolithic architecture offers a balanced approach, providing sufficient scalability and maintainability without the overhead of distributed systems.    

    **<p>Members of A1 - Group 08:</p>**
    <p>1905001 - Mohammad Sadat Hossain</p>
    <p>1905004 - Asif Azad</p>
    <p>1905015 - Amirul Islam Alif</p>

  contact:
    name: Sadat
    email: sadatho2014@gmail.com

  version: 1.0.11
servers:
  # Added by API Auto Mocking Plugin
  - description: SwaggerHub API Auto Mocking
    url: https://virtserver.swaggerhub.com/SADATHO2014/taskflow-api/1.0.11
  - description: TaskFlow Server
    url: https://taskflow-express-api.vercel.app/

paths:
  /login:
    post:
      tags:
        - Authentication
      summary: User login
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/login_body"
        required: true
      responses:
        "200":
          description: Successful login
          content:
            application/json:
              schema:
                type: object
                properties:
                  token:
                    type: string
                    description: "Access token for authenticated user"
                    example: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9"
                  user_id:
                    type: string
                    description: "ID of the authenticated user"
        "400":
          description: Unauthorized
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: Unauthorized
                  message:
                    type: string
                    example: Invalid username or password
  /register:
    post:
      tags:
        - Authentication
      summary: Register a new user
      requestBody:
        description: User registration details
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/registration_body"
        required: true
      responses:
        "200":
          description: User successfully registered
        "400":
          description: Bad request - Invalid input
        "500":
          description: Internal Server Error
  /logout:
    post:
      tags:
        - Authentication
      summary: User logout
      responses:
        "200":
          description: Successful logout
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Successfully logged out
                  links:
                    type: object
                    example: https://taskflow-express-api.vercel.app/
        "500":
          description: Internal Server Error
  /get-public-profile/{user-id}:
    get:
      tags:
        - User Profile
      summary: Get public profile of a user to show to other users
      parameters:
        - name: user-id
          in: path
          description: ID of the user whose profile is to be retrieved
          required: true
          schema:
            type: string
      responses:
        "200":
          description: User profile successfully retrieved
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/user_public_profile_response"
        "404":
          description: User not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/non_existent_user_response"
  /get-profile-settings:
    get:
      tags:
        - User Profile
      summary: Get profile settings of the authenticated user
      responses:
        "200":
          description: Profile settings successfully retrieved
          content:
            application/json:
              schema:
                type: object
                properties:
                  first_name:
                    type: string
                    example: "Mohammad"
                  middle_name:
                    type: string
                    example: "Sadat"
                  last_name:
                    type: string
                    example: "Hossain"
                  user_name:
                    type: string
                    example: "Sadat999"
                  phone_number:
                    type: string
                    example: "01700000000"
                  email:
                    type: string
                    format: email
                    example: "sadatho2014@gmail.com"
                  profile_picture:
                    type: string
                    format: url
                    example: "https://source.unsplash.com/400x300/?work"
        "500":
          description: Internal Server Error
  /update-profile-settings:
    put:
      tags:
        - User Profile
      summary: Update profile settings of the authenticated user
      requestBody:
        description: User profile settings
        content:
          application/json:
            schema:
              type: object
              properties:
                first_name:
                  type: string
                  example: "Mohammad"
                middle_name:
                  type: string
                  example: "Sadat"
                last_name:
                  type: string
                  example: "Hossain"
                user_name:
                  type: string
                  example: "Sadat999"
                phone_number:
                  type: string
                  example: "01700000000"
                email:
                  type: string
                  format: email
                  example: "abc@gmail.com"
      responses:
        "200":
          description: Profile settings successfully updated
        "400":
          description: Bad request - Invalid input
        "500":
          description: Internal Server Error
  /delete-profile:
    delete:
      tags:
        - User Profile
      summary: Delete profile of the authenticated user
      responses:
        "200":
          description: Profile successfully deleted
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Profile successfully deleted
                  links:
                    type: object
                    example: https://taskflow-express-api.vercel.app/
        "500":
          description: Internal Server Error
  /update-profile-picture:
    put:
      tags:
        - User Profile
      summary: Update profile picture of the authenticated user
      requestBody:
        description: User profile picture
        content:
          application/json:
            schema:
              type: object
              properties:
                profile_picture:
                  type: string
                  format: url
                  example: "https://source.unsplash.com/400x300/?work"
      responses:
        "200":
          description: Profile picture successfully updated
        "400":
          description: Bad request - Invalid input
        "500":
          description: Internal Server Error
  /get-boards:
    get:
      summary: Get all boards of the authenticated user for the own dashboard page
      tags:
        - Board
      responses:
        "200":
          description: Boards successfully retrieved
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    board_id:
                      type: string
                    board_name:
                      type: string
                    created_at:
                      type: string
                      format: date-time
                    board_owner:
                      type: string
                    board_progress:
                      type: number
                      format: float
                example:
                  - board_id: "1"
                    board_name: "Project 1"
                    created_at: "2021-08-01T00:00:00.000Z"
                    board_owner: "Sadat999"
                    board_progress: 0.3
                  - board_id: "2"
                    board_name: "Project 2"
                    created_at: "2021-08-01T00:00:00.000Z"
                    board_owner: "BRAINIAC77"
                    board_progress: 0.8
        "500":
          description: Internal Server Error
  /get-board-details/{board-id}:
    get:
      summary: Get details of a board for the board view page
      tags:
        - Board
      parameters:
        - name: board-id
          in: path
          description: ID of the board whose details are to be retrieved
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Board details successfully retrieved
          content:
            application/json:
              schema:
                type: object
                properties:
                  board_id:
                    type: string
                    example: "1"
                  board_name:
                    type: string
                    example: "Project 1"
                  board_description:
                    type: string
                    example: "This is a sample project"
                  created_at:
                    type: string
                    format: date-time
                    example: "2021-08-01T00:00:00.000Z"
                  board_owner:
                    type: string
                    example: "Sadat999"
                  board_progress:
                    type: number
                    format: float
                    example: 0.5
                  board_lists:
                    type: array
                    description: Lists within the board
                    items:
                      type: object
                      properties:
                        list_id:
                          type: string
                        list_name:
                          type: string
                        list_tasks:
                          type: array
                          description: Tasks within the list
                          items:
                            type: object
                            properties:
                              task_id:
                                type: string
                              task_name:
                                type: string
                              task_deadline:
                                type: string
                                format: date-time
                    example:
                      - list_id: "1"
                        list_name: "To Do"
                        list_tasks:
                          - task_id: "1"
                            task_name: "Task 1"
                            task_deadline: "2023-08-05T00:00:00.000Z"
                          - task_id: "2"
                            task_name: "Task 2"
                            task_deadline: "2023-08-05T00:00:00.000Z"
                      - list_id: "2"
                        list_name: "Doing"
                        list_tasks:
                          - task_id: "3"
                            task_name: "Task 3"
                            task_deadline: "2023-08-05T00:00:00.000Z"
                          - task_id: "4"
                            task_name: "Task 4"
                            task_deadline: "2023-08-05T00:00:00.000Z"
        "401":
          description: Unauthorized - User is not a member of the board
        "404":
          description: Board not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/non_existent_board_response"
        "500":
          description: Internal Server Error
  /get-board-settings/{board-id}:
    get:
      summary: Get settings of a board (including the member list) for the board settings page
      tags:
        - Board
      parameters:
        - name: board-id
          in: path
          description: ID of the board whose settings are to be retrieved
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Board settings successfully retrieved
          content:
            application/json:
              schema:
                type: object
                properties:
                  board_id:
                    type: string
                    example: "1"
                  board_name:
                    type: string
                    example: "Project 1"
                  board_description:
                    type: string
                    example: "This is a sample project"
                  board_owner:
                    type: string
                    example: "Sadat999"
                  board_members:
                    type: array
                    description: Members of the board
                    items:
                      type: object
                      properties:
                        user_id:
                          type: string
                        user_name:
                          type: string
                        full_name:
                          type: string
                        profile_picture:
                          type: string
                          format: url
                        member_role:
                          type: string
                          description: "1 - Owner, 2 - Admin, 3 - Member"
                    example:
                      - user_id: "1"
                        user_name: "Sadat999"
                        full_name: "Mohammad Sadat Hossain"
                        profile_picture: "https://source.unsplash.com/400x300/?work"
                        member_role: "1"
                      - user_id: "2"
                        user_name: "BRAINIAC77"
                        full_name: "Asif Azad"
                        profile_picture: "https://source.unsplash.com/400x300/?work"
                        member_role: "2"
        "401":
          description: Unauthorized - User is not an admin of the board
        "404":
          description: Board not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/non_existent_board_response"
        "500":
          description: Internal Server Error
  /add-member/{board-id}/{user-id}:
    post:
      summary: Add a member to a board
      tags:
        - Board
      parameters:
        - name: board-id
          in: path
          description: ID of the board to which the member is to be added
          required: true
          schema:
            type: string
        - name: user-id
          in: path
          description: ID of the user to be added as a member
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Member successfully added
        "401":
          description: Unauthorized - User is not an admin of the board
        "404":
          description: Board or user not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: Board or user not found
                  message:
                    type: string
                    example: The specified board ID or user ID does not exist
        "500":
          description: Internal Server Error
  /remove-member/{board-id}/{user-id}:
    delete:
      summary: Remove a member from a board
      tags:
        - Board
      parameters:
        - name: board-id
          in: path
          description: ID of the board from which the member is to be removed
          required: true
          schema:
            type: string
        - name: user-id
          in: path
          description: ID of the user to be removed as a member
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Member successfully removed
        "401":
          description: Unauthorized - User is not an admin of the board
        "404":
          description: Board or user not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: Board or user not found
                  message:
                    type: string
                    example: The specified board ID or user ID does not exist
        "500":
          description: Internal Server Error
  /update-member-access/{user-id}:
    put:
      summary: Update access of a member of a board
      tags:
        - Board
      parameters:
        - name: user-id
          in: path
          description: ID of the user whose access is to be updated
          required: true
          schema:
            type: string
      requestBody:
        description: Member access
        content:
          application/json:
            schema:
              type: object
              properties:
                member_role:
                  type: string
                  example: "1"
                  description: "1 - Owner, 2 - Admin, 3 - Member"
      responses:
        "200":
          description: Member access successfully updated
        "401":
          description: Unauthorized - User is not an admin of the board
        "404":
          description: User not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/non_existent_user_response"
        "500":
          description: Internal Server Error
  /update-board-settings/{board-id}:
    put:
      summary: Update settings of a board (name, description or ownership transfer)
      tags:
        - Board
      parameters:
        - name: board-id
          in: path
          description: ID of the board whose settings are to be updated
          required: true
          schema:
            type: string
      requestBody:
        description: Board settings
        content:
          application/json:
            schema:
              type: object
              properties:
                board-id:
                  type: string
                  example: "1"
                board_name:
                  type: string
                  example: "Project 1"
                board_description:
                  type: string
                  example: "This is a sample project"
                board_owner:
                  type: string
                  example: "Sadat999"
      responses:
        "200":
          description: Board settings successfully updated
        "401":
          description: Unauthorized - User is not an admin of the board
        "404":
          description: Board not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/non_existent_board_response"
        "500":
          description: Internal Server Error
  /create-board:
    post:
      summary: Create a new board
      tags:
        - Board
      requestBody:
        description: Board details
        content:
          application/json:
            schema:
              type: object
              properties:
                board_name:
                  type: string
                  example: "Project 1"
                board_description:
                  type: string
                  example: "This is a sample project"
                board_members:
                  type: array
                  description: Members of the board
                  items:
                    type: object
                    properties:
                      user_id:
                        type: string
                      user_name:
                        type: string
                      member_role:
                        type: string
                        description: "1 - Owner, 2 - Admin, 3 - Member"
                  example:
                    - user_id: "1"
                      user_name: "Sadat999"
                      member_role: "1"
                    - user_id: "2"
                      user_name: "BRAINIAC77"
                      member_role: "2"
      responses:
        "200":
          description: Board successfully created
          content:
            application/json:
              schema:
                type: object
                properties:
                  board_id:
                    type: string
                    example: "1"
                  board_name:
                    type: string
                    example: "Project 1"
                  created_at:
                    type: string
                    format: date-time
                    example: "2021-08-01T00:00:00.000Z"
        "400":
          description: Bad request - Invalid input
        "500":
          description: Internal Server Error
  /delete-board/{board-id}:
    delete:
      summary: Delete a board
      tags:
        - Board
      parameters:
        - name: board-id
          in: path
          description: ID of the board to be deleted
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Board successfully deleted
        "401":
          description: Unauthorized - User is not the owner of the board
        "404":
          description: Board not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/non_existent_board_response"
        "500":
          description: Internal Server Error
  /get-task-lists/{board-id}:
    get:
      summary: Get all task lists of a board along with their minimal detail
      tags:
        - Task List
      parameters:
        - name: board-id
          in: path
          description: ID of the board whose task lists are to be retrieved
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Task lists successfully retrieved
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    list_id:
                      type: string
                    list_name:
                      type: string
                  example:
                    - list_id: "1"
                      list_name: "To Do"
                    - list_id: "2"
                      list_name: "Doing"
        "401":
          description: Unauthorized - User is not a member of the board
        "404":
          description: Board not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/non_existent_board_response"
        "500":
          description: Internal Server Error
  /add-task-list/{board-id}:
    post:
      summary: Add a task list to a board
      tags:
        - Task List
      parameters:
        - name: board-id
          in: path
          description: ID of the board to which the task list is to be added
          required: true
          schema:
            type: string
      requestBody:
        description: Task list details
        content:
          application/json:
            schema:
              type: object
              properties:
                list_name:
                  type: string
                  example: "To Do"
      responses:
        "200":
          description: Task list successfully added
          content:
            application/json:
              schema:
                type: object
                properties:
                  list_id:
                    type: string
                    example: "1"
                  list_name:
                    type: string
                    example: "To Do"
        "401":
          description: Unauthorized - User is not a member of the board
        "404":
          description: Board not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/non_existent_board_response"
        "500":
          description: Internal Server Error
  /delete-task-list/{list-id}:
    delete:
      summary: Delete a task list from a board
      tags:
        - Task List
      parameters:
        - name: list-id
          in: path
          description: ID of the task list to be deleted
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Task list successfully deleted
        "401":
          description: Unauthorized - User does not have admin access to the list
        "404":
          description: Task list not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/non_existent_list_reponse"
        "500":
          description: Internal Server Error
  /update-task-list-access/{list-id}/{member-id}:
    put:
      summary: Update access of a member of a task list
      tags:
        - Task List
      parameters:
        - name: list-id
          in: path
          description: ID of the task list whose member access is to be updated
          required: true
          schema:
            type: string
        - name: member-id
          in: path
          description: ID of the member whose access is to be updated
          required: true
          schema:
            type: string
      requestBody:
        description: Member access
        content:
          application/json:
            schema:
              type: object
              properties:
                member_role:
                  type: string
                  example: "1"
                  description: "1 - Owner, 2 - Admin, 3 - Member"
      responses:
        "200":
          description: Member access successfully updated
        "401":
          description: Unauthorized - User does not have admin access to the list
        "404":
          description: User or task list not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: User or task list not found
                  message:
                    type: string
                    example: The specified user ID or task list ID does not exist
        "500":
          description: Internal Server Error
  /get-tasks/{task-list-id}:
    get:
      summary: Get all tasks of a task list along with their minimal detail
      tags:
        - Task
      parameters:
        - name: task-list-id
          in: path
          description: ID of the task list whose tasks are to be retrieved
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Tasks successfully retrieved
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/task_shortened_form"
        "401":
          description: Unauthorized - User is not a member of the task list
        "404":
          description: Task list not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/non_existent_list_reponse"
        "500":
          description: Internal Server Error
  /get-task-detail/{task-id}:
    get:
      summary: Get all details of a task
      tags:
        - Task
      parameters:
        - name: task-id
          in: path
          description: ID of the task whose details are to be retrieved
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Task details successfully retrieved
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/task_detailed_form"

        "401":
          description: Unauthorized - User is not assigned for this task
        "404":
          description: Task not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/non_existent_task_response"
        "500":
          description: Internal Server Error
  /get-all-labels:
    get:
      summary: Get all labels across the application
      tags:
        - Task
      responses:
        "200":
          description: Labels successfully retrieved
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    label_id:
                      type: string
                    label_name:
                      type: string
                  example:
                    - label_id: "1"
                      label_name: "bugfix"
                    - label_id: "2"
                      label_name: "feature-release"
                    - label_id: "3"
                      label_name: "documentation"
                    - label_id: "4"
                      label_name: "enhancement"
        "500":
          description: Internal Server Error
  /add-label/{task-id}:
    post:
      summary: Add a label to a task, and if this is a new label, add it to the application
      tags:
        - Task
      parameters:
        - name: task-id
          in: path
          description: ID of the task to which the label is to be added
          required: true
          schema:
            type: string
      requestBody:
        description: Label details
        content:
          application/json:
            schema:
              type: object
              properties:
                label_name:
                  type: string
                  example: "leisure-activity"
      responses:
        "200":
          description: Label successfully added
          content:
            application/json:
              schema:
                type: object
                properties:
                  label_id:
                    type: string
                    example: "1"
                  label_name:
                    type: string
                    example: "bugfix"
        "400":
          description: Bad request - Invalid input
        "401":
          description: Unauthorized - User does not have edit access to the task
        "404":
          description: Task not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/non_existent_task_response"
        "500":
          description: Internal Server Error
  /update-task-detail/{task-id}:
    put:
      summary: Update details of a task (name, description, color, time)
      tags:
        - Task
      parameters:
        - name: task-id
          in: path
          description: ID of the task whose details are to be updated
          required: true
          schema:
            type: string
      requestBody:
        description: Task details
        content:
          application/json:
            schema:
              type: object
              properties:
                task_name:
                  type: string
                  example: "Task 1"
                task_description:
                  type: string
                  example: "This is the updated description"
                task_label_color:
                  type: string
                  example: "#FF0000"
                task_start_time:
                  type: string
                  format: date-time
                  example: "2023-08-05T00:00:00.000Z"
                task_deadline:
                  type: string
                  format: date-time
                  example: "2023-08-05T00:00:00.000Z"
      responses:
        "200":
          description: Task details successfully updated
        "400":
          description: Bad request - Invalid input
        "401":
          description: Unauthorized - User does not have edit access to the task
        "404":
          description: Task not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/non_existent_task_response"
        "500":
          description: Internal Server Error
  /update-cover-photo/{task-id}:
    put:
      summary: Update cover photo of a task
      tags:
        - Task
      parameters:
        - name: task-id
          in: path
          description: ID of the task whose cover photo is to be updated
          required: true
          schema:
            type: string
      requestBody:
        description: Task cover photo
        content:
          application/json:
            schema:
              type: object
              properties:
                task_cover_photo:
                  type: string
                  format: url
                  example: "https://source.unsplash.com/400x300/?work"
      responses:
        "200":
          description: Task cover photo successfully updated
        "400":
          description: Bad request - Invalid input
        "401":
          description: Unauthorized - User does not have edit access to the task
        "404":
          description: Task not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/non_existent_task_response"
        "500":
          description: Internal Server Error
  /get-messages/{task-id}:
    post:
      summary: Get messages of a task, having fields for how many messages to retrieve
      tags:
        - Task
      parameters:
        - name: task-id
          in: path
          description: ID of the task whose messages are to be retrieved
          required: true
          schema:
            type: string
      requestBody:
        description: Message details
        content:
          application/json:
            schema:
              type: object
              properties:
                n_messages:
                  type: integer
                  example: 10
                offset:
                  type: integer
                  example: 0
                  description: The offset is from the latest message
      responses:
        "200":
          description: Messages successfully retrieved
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    message_id:
                      type: string
                    message_content:
                      type: string
                    message_sender:
                      type: string
                    message_time:
                      type: string
                      format: date-time
                    message_attachment:
                      type: string
                      format: url
                      description: URL of the attachment, can be null
                example:
                  - message_id: "1"
                    message_content: "Hello"
                    message_sender: "Sadat999"
                    message_time: "2023-08-05T00:00:00.000Z"
                    message_attachment: "https://source.unsplash.com/400x300/?work"
                  - message_id: "2"
                    message_content: "Hi"
                    message_sender: "BRAINIAC77"
                    message_time: "2023-08-05T00:00:00.000Z"
                    message_attachment: null
                  - message_id: "3"
                    message_content: "How are you?"
                    message_sender: "Sadat999"
                    message_time: "2023-08-05T00:00:00.000Z"
                    message_attachment: null
                  - message_id: "4"
                    message_content: "I am fine"
                    message_sender: "BRAINIAC77"
                    message_time: "2023-08-05T00:00:00.000Z"
                    message_attachment: null
        "400":
          description: Bad request - Invalid input
        "401":
          description: Unauthorized - User is not an assignee of this task
        "404":
          description: Task not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/non_existent_task_response"
        "500":
          description: Internal Server Error
  /send-message/{task-id}:
    post:
      summary: Send a message to a task
      tags:
        - Task
      parameters:
        - name: task-id
          in: path
          description: ID of the task to which the message is to be sent
          required: true
          schema:
            type: string
      requestBody:
        description: Message details
        content:
          application/json:
            schema:
              type: object
              properties:
                message_content:
                  type: string
                  example: "Hello"
                message_attachment:
                  type: string
                  format: url
                  example: "https://source.unsplash.com/400x300/?work"
      responses:
        "200":
          description: Message successfully sent
          content:
            application/json:
              schema:
                type: object
                properties:
                  message_id:
                    type: string
                    example: "1"
                  message_sender:
                    type: string
                    example: "Sadat999"
                  message_time:
                    type: string
                    format: date-time
                    example: "2023-08-05T00:00:00.000Z"
        "400":
          description: Bad request - Invalid input
        "401":
          description: Unauthorized - User is not an assignee of this task
        "404":
          description: Task not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/non_existent_task_response"
        "500":
          description: Internal Server Error
  /get-sorted-tasks:
    get:
      summary: Get all tasks of the authenticated user sorted by ranking algorithm
      tags:
        - Task
      responses:
        "200":
          description: Tasks successfully retrieved
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    task_id:
                      type: string
                    task_name:
                      type: string
                    task_deadline:
                      type: string
                      format: date-time
                example:
                  - task_id: "1"
                    task_name: "Task 1"
                    task_deadline: "2023-08-05T00:00:00.000Z"
                  - task_id: "2"
                    task_name: "Task 2"
                    task_deadline: "2023-08-05T00:00:00.000Z"
        "500":
          description: Internal Server Error
  /get-unread-notifications:
    get:
      summary: Get all unread notifications of the authenticated user
      tags:
        - Notification
      responses:
        "200":
          description: Notifications successfully retrieved
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    notification_id:
                      type: string
                    notification_content:
                      type: string
                    notification_time:
                      type: string
                      format: date-time
                    notification_url_1:
                      type: string
                      format: url
                      description: URL of the first link, can be null
                    notification_url_2:
                      type: string
                      format: url
                      description: URL of the second link, can be null
                    notification_read:
                      type: boolean
                example:
                  - notification_id: "1"
                    notification_content: "You have been assigned to Task 1"
                    notification_time: "2023-08-05T00:00:00.000Z"
                    notification_url_1: "https://taskflow-express-api.vercel.app/"
                    notification_url_2: null
                    notification_read: false
                  - notification_id: "2"
                    notification_content: "You have been assigned to Task 2"
                    notification_time: "2023-08-05T00:00:00.000Z"
                    notification_url_1: "https://taskflow-express-api.vercel.app/"
                    notification_url_2: null
                    notification_read: false
        "500":
          description: Internal Server Error
  /get-notifications:
    post:
      summary: Get all notifications of the authenticated user, having fields for how many notifications to retrieve
      tags:
        - Notification
      requestBody:
        description: Notification details
        content:
          application/json:
            schema:
              type: object
              properties:
                n_notifications:
                  type: integer
                  example: 10
                offset:
                  type: integer
                  example: 0
                  description: The offset is from the latest notification
      responses:
        "200":
          description: Notifications successfully retrieved
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    notification_id:
                      type: string
                    notification_content:
                      type: string
                    notification_time:
                      type: string
                      format: date-time
                    notification_url_1:
                      type: string
                      format: url
                      description: URL of the first link, can be null
                    notification_url_2:
                      type: string
                      format: url
                      description: URL of the second link, can be null
                    notification_read:
                      type: boolean
                example:
                  - notification_id: "1"
                    notification_content: "You have been assigned to Task 1"
                    notification_time: "2023-08-05T00:00:00.000Z"
                    notification_url_1: "https://taskflow-express-api.vercel.app/"
                    notification_url_2: null
                    notification_read: true
                  - notification_id: "2"
                    notification_content: "You have been assigned to Task 2"
                    notification_time: "2023-08-05T00:00:00.000Z"
                    notification_url_1: "https://taskflow-express-api.vercel.app/"
                    notification_url_2: null
                    notification_read: false
        "400":
          description: Bad request - Invalid input
        "500":
          description: Internal Server Error
  /add-notification:
    post:
      summary: Add a notification to the authenticated user
      tags:
        - Notification
      requestBody:
        description: Notification details
        content:
          application/json:
            schema:
              type: object
              properties:
                notification_content:
                  type: string
                  example: "You have been assigned to Task 1"
                notification_url_1:
                  type: string
                  format: url
                  example: "https://taskflow-express-api.vercel.app/"
                notification_url_2:
                  type: string
                  format: url
                  example: null
      responses:
        "200":
          description: Notification successfully added
          content:
            application/json:
              schema:
                type: object
                properties:
                  notification_id:
                    type: string
                    example: "1"
                  notification_content:
                    type: string
                    example: "You have been assigned to Task 1"
                  notification_time:
                    type: string
                    format: date-time
                    example: "2023-08-05T00:00:00.000Z"
                  notification_url_1:
                    type: string
                    format: url
                    example: "https://taskflow-express-api.vercel.app/"
                  notification_url_2:
                    type: string
                    format: url
                    example: null
                  notification_read:
                    type: boolean
                    example: false
        "400":
          description: Bad request - Invalid input
        "500":
          description: Internal Server Error
  /mark-notification-as-read:
    put:
      summary: Mark a notification as read
      tags:
        - Notification
      requestBody:
        description: Notification details
        content:
          application/json:
            schema:
              type: object
              properties:
                notification_id:
                  type: string
                  example: "1"
      responses:
        "200":
          description: Notification successfully marked as read
        "400":
          description: Bad request - Invalid input
        "500":
          description: Internal Server Error

components:
  schemas:
    registration_body:
      type: object
      properties:
        first_name:
          type: string
          example: "Mohammad"
        middle_name:
          type: string
          example: "Sadat"
        last_name:
          type: string
          example: "Hossain"
        user_name:
          type: string
          example: "Sadat999"
        email:
          type: string
          format: email
          example: "sadatho2014@gmail.com"
        phone_number:
          type: string
          example: "01712345678"
        password:
          type: string
          format: password
          example: "123456"
          description: Password will be hashed before sending to the server
    login_body:
      type: object
      properties:
        user_name:
          type: string
          example: "Sadat999"
        password:
          type: string
          format: password
          example: "123456"
          description: Password will be hashed before sending to the server
    user_public_profile_response:
      type: object
      properties:
        user_id:
          type: string
          example: "1"
        full_name:
          type: string
          example: "Sadat Hossain"
        user_name:
          type: string
          example: "Sadat999"
        email:
          type: string
          format: email
          example: "sadatho2014@gmail.com"
        phone_number:
          type: string
          example: "01700000000"
        profile_picture:
          type: string
          format: url
          example: "https://source.unsplash.com/400x300/?work"
        task_completion_rate:
          type: number
          format: float
          example: 0.5
        n_tasks_completed:
          type: integer
          example: 5
        longest_streak:
          type: integer
          example: 10
        public_boards:
          type: array
          description: List of public boards the user is a part of
          items:
            type: object
            properties:
              board_id:
                type: string
              board_name:
                type: string
              board_description:
                type: string
              board_owner:
                type: string
            example:
              - board_id: "1"
                board_name: "Project 1"
                board_description: "This is a sample project"
                board_owner: "Sadat999"
              - board_id: "2"
                board_name: "Project 2"
                board_description: "This is another sample project"
                board_owner: "Sadat999"
    non_existent_user_response:
      type: object
      properties:
        error:
          type: string
          example: User not found
        message:
          type: string
          example: The specified user ID does not exist
    non_existent_board_response:
      type: object
      properties:
        error:
          type: string
          example: Board not found
        message:
          type: string
          example: The specified board ID does not exist
    non_existent_list_reponse:
      type: object
      properties:
        error:
          type: string
          example: Task list not found
        message:
          type: string
          example: The specified task list ID does not exist
    non_existent_task_response:
      type: object
      properties:
        error:
          type: string
          example: Task not found
        message:
          type: string
          example: The specified task ID does not exist
    task_shortened_form:
      type: object
      properties:
        task_id:
          type: string
          example: "1"
        task_name:
          type: string
          example: "Read the documentation"
        task_label_color:
          type: string
          example: "#FF0000"
        task_deadline:
          type: string
          format: date-time
          example: "2023-08-05T00:00:00.000Z"
    task_detailed_form:
      type: object
      properties:
        task_id:
          type: string
          example: "1"
        task_name:
          type: string
          example: "Task 1"
        task_description:
          type: string
          example: "This is a sample task"
        task_cover_photo:
          type: string
          format: url
          example: "https://source.unsplash.com/400x300/?work"
        task_label_color:
          type: string
          example: "#FF0000"
        task_start_time:
          type: string
          format: date-time
          example: "2023-08-05T00:00:00.000Z"
        task_deadline:
          type: string
          format: date-time
          example: "2023-08-05T00:00:00.000Z"
        task_labels:
          type: array
          description: Labels of the task
          items:
            type: object
            properties:
              label_id:
                type: string
              label_name:
                type: string
          example:
            - label_id: "1"
              label_name: "bugfix"
            - label_id: "2"
              label_name: "feature-release"
        task_assignees:
          type: array
          description: Assignees of the task
          items:
            type: object
            properties:
              user_id:
                type: string
              user_name:
                type: string
              profile_picture:
                type: string
                format: url
          example:
            - user_id: "1"
              user_name: "Sadat999"
              profile_picture: "https://source.unsplash.com/400x300/?work"
            - user_id: "2"
              user_name: "BRAINIAC77"
              profile_picture: "https://source.unsplash.com/400x300/?work"
        task_checklist_items:
          type: array
          description: Checklist items of the task
          items:
            type: object
            properties:
              item_id:
                type: string
              item_name:
                type: string
              item_status:
                type: boolean
          example:
            - item_id: "1"
              item_name: "Write the code"
              item_status: true
            - item_id: "2"
              item_name: "Read the documentation"
              item_status: false
