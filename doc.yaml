openapi: 3.0.3
info:
  title: TaskFlow API & Architecture Documentation
  description: |
    ## Introduction
    TaskFlow is an innovative task manager assistant with an automated UI agent designed to streamline productivity and reduce procrastination, inspired from [CatAlyst: Domain-Extensible Intervention for Preventing Task Procrastination Using Large Generative Models](https://arxiv.org/abs/2302.05678). Through its intelligent features, TaskFlow helps users organize their life, providing a seamless interface for managing both personal and professional tasks.

    ## Key Features
    1. **AI-Driven Task Management**: Integrates artificial intelligence to analyze task progress, and then offer further assistance to resume the task. This saves users from being stuck at a point in any task. The AI agent serves as an initiator, guiding users to overcome procrastination tendencies and manage tasks effectively.
    2. **Content Generation**: The AI agent mentioned earlier will help the users in carrying on their tasks by generating relevant contents. These contents will be continuation of the progress the user has already made in the respective task. Primarily, these contents are going to be textual contents.
    3. **Intelligent Task Scheduling**: Leverages sophisticated algorithms to dynamically schedule tasks based on user preferences, deadlines, and historical productivity data. This assists in optimizing daily routines and reduces the overwhelm of task management.
    4. **Effective Task Reminders**: Thanks to the in-house algorithm for task scheduling, TaskFlow gives timely reminders to users to resume or initiate a task before it gets too late. To add to the blessing, TaskFlow not only gives reminders, but also provided some initiating help to get things going on.
    5. **Statistical Analysis**: Provides detailed analytics on user performance and task completion trends. These insights enable users to understand their productivity patterns and make data-driven adjustments to their schedules.
    6. **Project Management**: TaskFlow is not solely confined to individual task management. Its horizon can be expanded across teams or even bigger entities for management of projects. Different members of the team can have respective roles and corresponding access to the different features of the task-boards.


    ## Incremental Features
    1. **Progress Sharing**: Users can share their achievements of obtaining a milestone or completing a task on popular social media platforms before their friends and family.
    2. **Non-textual Content Generation**: Although primarily TaskFlow aims to offer textual contents, it can later expand to image or other types of contents as well.


    ## Technology Stack
    - **Svelte (Frontend)**: Chosen for its innovative approach to frontend development, ensuring a responsive and interactive user interface with minimal overhead.
    <p align='center'><img src="https://upload.wikimedia.org/wikipedia/commons/thumb/1/1b/Svelte_Logo.svg/1200px-Svelte_Logo.svg.png" alt="Svelte" width="135" height="195"></p>

    - **ExpressJS (Backend)**: Selected for its efficiency in handling multiple requests simultaneously, providing a robust and scalable backend solution.
    <p align='center'><img src="https://upload.wikimedia.org/wikipedia/commons/6/64/Expressjs.png" alt="Express.js" width="271" height="114"></p>

    - **PostgreSQL (Database)**: Preferred for its advanced features in handling complex queries and large datasets, ensuring data integrity and performance.
    <p align='center'><img src="https://upload.wikimedia.org/wikipedia/commons/thumb/2/29/Postgresql_elephant.svg/1024px-Postgresql_elephant.svg.png" alt="PostgreSQL" width="169" height="205"></p>

    ## System Architecture : Monolithic
    For TaskFlow, a monolithic architecture was deemed most suitable due to several reasons:
    - **Simplicity in Development and Deployment**: In the initial stages, a monolithic architecture simplifies the development process by allowing a single, unified code base, which is easier to develop, test, and deploy.
    - **Performance Considerations**: Given the nature of TaskFlow, which requires seamless interaction between different features, a monolithic architecture ensures better performance through tightly integrated components.
    - **Project Scale and Complexity**: For the current scope and complexity of TaskFlow, a monolithic architecture offers a balanced approach, providing sufficient scalability and maintainability without the overhead of distributed systems.    

    **<p>Members of A1 - Group 08:</p>**
    <p>1905001 - Mohammad Sadat Hossain</p>
    <p>1905004 - Asif Azad</p>
    <p>1905015 - Amirul Islam Alif</p>

  contact:
    name: Sadat
    email: sadatho2014@gmail.com

  version: 1.0.11
servers:
  # Added by API Auto Mocking Plugin
  - description: SwaggerHub API Auto Mocking
    url: https://virtserver.swaggerhub.com/SADATHO2014/taskflow-api/1.0.11
  - description: TaskFlow Server
    url: https://taskflow-express-api.vercel.app/

paths:
  /login:
    post:
      tags:
        - General
      summary: User login
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                user_name:
                  type: string
                  example: "Sadat999"
                password:
                  type: string
                  format: password
                  example: "p@sSw0rD"
                  description: Password will be hashed before sending to the server
        required: true
      responses:
        "200":
          description: Successful login
          content:
            application/json:
              schema:
                type: object
                properties:
                  token:
                    type: string
                    description: Access token for authenticated user
                    example: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9"
                  user_id:
                    type: string
                    description: ID of the authenticated user
                    example: "af3b4c5d6e7f8g9h0i1j2k3l4m5n6o7p"
        "400":
          description: Unauthorized attempt - Invalid credentials
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                  message:
                    type: string
                    example: "Invalid username or password"
  /register:
    post:
      tags:
        - General
      summary: Register a new user
      requestBody:
        description: User registration details
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/RegistrationInformation"
        required: true
      responses:
        "200":
          description: Successful registration
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: User successfully registered
                  links:
                    type: object
                    example: https://taskflow-express-api.vercel.app/login
        "400":
          description: Bad request - invalid input
        "500":
          description: Internal Server Error
  /logout:
    post:
      tags:
        - General
      summary: User logout
      responses:
        "200":
          description: Successful logout
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Successfully logged out
                  links:
                    type: object
                    example: https://taskflow-express-api.vercel.app/
        "500":
          description: Internal Server Error
  /get-public-profile/{user-id}:
    get:
      tags:
        - User Profile
      summary: Get public profile of a user to show to other users
      parameters:
        - name: user-id
          in: path
          description: ID of the user whose profile is to be retrieved
          required: true
          schema:
            type: string
            example: "d4e5f6g7h8i9j0k1l2m3n4o5p6q7r"
      responses:
        "200":
          description: User profile successfully retrieved
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserPublicProfileResponse"
        "404":
          description: User not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NonExistentUserResponse"
  /get-profile-settings:
    get:
      tags:
        - User Profile
      summary: Get profile settings of the authenticated user
      responses:
        "200":
          description: Profile settings successfully retrieved
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/UserProfileSettings"
                example:
                  user_id: "af3b4c5d6e7f8g9h0i1j2k3l4m5n6o7p"
                  first_name: "Mohammad"
                  middle_name: "Sadat"
                  last_name: "Hossain"
                  user_name: "Sadat999"
                  password: "f1A2s3D4"
                  phone_number: "01723456789"
                  email_address: "sadatdbt@gmail.com"
                  profile_picture: "https://unsplash.com/photos/a-long-exposure-photo-of-a-mountain-road-l2scWsGyq_U"
                  bio: "In this world, there are two types of people. Those who procrastinate, and those who don't."
        "500":
          description: Internal Server Error
  /update-profile-settings:
    put:
      tags:
        - User Profile
      summary: Update profile settings of the authenticated user (except profile picture)
      requestBody:
        description: User profile settings
        content:
          application/json:
            schema:
              allOf:
                - $ref: "#/components/schemas/UserProfileSettings"
              example:
                user_id: "af3b4c5d6e7f8g9h0i1j2k3l4m5n6o7p"
                first_name: "Mohammad"
                middle_name: "Sadat"
                last_name: "Hossain"
                user_name: "Sadat999"
                password: "f1A2s3D423vL#*1"
                phone_number: "01875123456"
                email_address: "buetcse19@gmail.com"
                bio: "Hello there! Welcome to my profile"
      responses:
        "200":
          description: Profile settings successfully updated
        "400":
          description: Bad request - Invalid input
        "500":
          description: Internal Server Error
  /update-profile-picture:
    put:
      tags:
        - User Profile
      summary: Update profile picture of the authenticated user
      requestBody:
        description: User profile picture
        content:
          application/json:
            schema:
              type: object
              properties:
                user_id:
                  type: string
                  format: string
                  example: "af3b4c5d6e7f8g9h0i1j2k3l4m5n6o7p"
                profile_picture:
                  type: object
                  format: binary
                  description: Image file to be uploaded
      responses:
        "200":
          description: Profile picture successfully updated
        "400":
          description: Bad request - Invalid input
        "500":
          description: Internal Server Error
  /delete-profile:
    delete:
      tags:
        - User Profile
      summary: Delete profile of the authenticated user
      responses:
        "200":
          description: Profile successfully deleted
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Profile successfully deleted
                  links:
                    type: object
                    example: https://taskflow-express-api.vercel.app/
        "500":
          description: Internal Server Error
  /get-boards:
    get:
      summary: Get all boards of the authenticated user for the dashboard page
      tags:
        - Board
      responses:
        "200":
          description: Boards successfully retrieved
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/BoardSummarizedForm"
                example:
                  - board_id: 1
                    board_name: "CSE408 Software Project | TaskFlow"
                    board_description: "This board oversees the progress of the CSE408 Software Project"
                    created_at: "2023-10-05T00:00:00.000Z"
                    board_deadline: "2024-01-31T00:00:00.000Z"
                    board_owner: "Sadat999"
                    board_overall_progress: 0.45
                  - board_id: 2
                    board_name: "CSE406 Security Project | Wazuh"
                    board_description: "This board oversees the progress of the CSE406 Security Project"
                    created_at: "2023-11-05T00:00:00.000Z"
                    board_deadline: "2024-01-31T00:00:00.000Z"
                    board_owner: "risenfromashes"
                    board_overall_progress: 0.12
                  - board_id: 3
                    board_name: "Thesis | Language Model of Phylogenetic Trees"
                    board_description: "Tune here to be in sync with the progress of our thesis work"
                    created_at: "2023-10-23T00:00:00.000Z"
                    board_deadline: "2024-01-31T00:00:00.000Z"
                    board_owner: "Sadat999"
                    board_overall_progress: 0.09
        "500":
          description: Internal Server Error
  /get-board-content/{board-id}:
    get:
      summary: Get lists and tasks of a board for the board view page
      tags:
        - Board
      parameters:
        - name: board-id
          in: path
          description: ID of the board whose content is to be retrieved
          required: true
          schema:
            type: integer
            example: 3
      responses:
        "200":
          description: Board content successfully retrieved
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/BoardContent"
                example:
                  board_id: 1
                  board_name: "CSE408 Software Project | TaskFlow"
                  board_lists:
                    - list_id: 1
                      list_name: "Project Scope Presentation"
                      list_tasks:
                        - task_id: 1
                          task_name: "Research to find a suitable project"
                          task_deadline: "2023-10-05T00:00:00.000Z"
                          task_label_color: "#FF0000"
                          task_overall_progress: 1.00
                        - task_id: 2
                          task_name: "Do a meeting for project finalization"
                          task_deadline: "2023-10-06T00:00:00.000Z"
                          task_label_color: "#123456"
                          task_overall_progress: 1.00
                        - task_id: 3
                          task_name: "Prepare the presentation slides"
                          task_deadline: "2023-10-08T00:00:00.000Z"
                          task_label_color: "#652921"
                          task_overall_progress: 1.00
                    - list_id: 2
                      list_name: "Mock UI Design"
                      list_tasks:
                        - task_id: 4
                          task_name: "Sketch the design in a meeting"
                          task_deadline: "2023-10-10T00:00:00.000Z"
                          task_label_color: "#F2A541"
                          task_overall_progress: 1.00
                        - task_id: 5
                          task_name: "Design the home page"
                          task_deadline: "2023-10-17T00:00:00.000Z"
                          task_label_color: "#F23A41"
                          task_overall_progress: 1.00
                        - task_id: 6
                          task_name: "Design the profile settings page"
                          task_deadline: "2023-10-17T00:00:00.000Z"
                          task_label_color: "#F2F541"
                          task_overall_progress: 1.00
                        - task_id: 7
                          task_name: "Design the board view page"
                          task_deadline: "2023-10-17T00:00:00.000Z"
                          task_label_color: "#F2F541"
                          task_overall_progress: 1.00
                        - task_id: 8
                          task_name: "Design the task view page"
                          task_deadline: "2023-10-17T00:00:00.000Z"
                          task_label_color: "#F2F541"
                          task_overall_progress: 1.00
                        - task_id: 9
                          task_name: "Design the task creation page"
                          task_deadline: "2023-10-17T00:00:00.000Z"
                          task_label_color: "#F2F541"
                          task_overall_progress: 1.00
                        - task_id: 10
                          task_name: "Finalize the design on Figma"
                          task_deadline: "2023-10-17T00:00:00.000Z"
                          task_label_color: "#A3F541"
                          task_overall_progress: 1.00
                    - list_id: 3
                      list_name: "API & Architecture Presentation"
                      list_tasks:
                        - task_id: 11
                          task_name: "Plan the APIs"
                          task_deadline: "2023-10-27T00:00:00.000Z"
                          task_label_color: "#F23A41"
                          task_overall_progress: 1.00
                        - task_id: 12
                          task_name: "Design the architecture"
                          task_deadline: "2023-10-27T00:00:00.000Z"
                          task_label_color: "#123456"
                          task_overall_progress: 0.21
                        - task_id: 13
                          task_name: "Document on SwaggerHub"
                          task_deadline: "2023-10-27T00:00:00.000Z"
                          task_label_color: "#652921"
                          task_overall_progress: 0.64
        "401":
          description: Unauthorized - User is not a member of the board
        "404":
          description: Board not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NonExistentBoardResponse"
        "500":
          description: Internal Server Error
  /get-board-settings/{board-id}:
    get:
      summary: Get settings of a board (including the member list)
      tags:
        - Board
      parameters:
        - name: board-id
          in: path
          description: ID of the board whose settings are to be retrieved
          required: true
          schema:
            type: integer
            example: 3
      responses:
        "200":
          description: Board settings successfully retrieved
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/BoardSettings"
                example:
                  board_id: 2
                  board_name: "CSE406 Security Project | Wazuh"
                  board_description: "This board oversees the progress of the CSE406 Security Project"
                  board_owner: "risenfromashes"
                  board_deadline: "2024-01-31T00:00:00.000Z"
                  board_members:
                    - user_id: "af3b4c5d6e7f8g9h0i1j2k3l4m5n6o7p"
                      user_name: "Sadat999"
                      full_name: "Mohammad Sadat Hossain"
                      profile_picture: "https://unsplash.com/photos/a-long-exposure-photo-of-a-mountain-road-l2scWsGyq_U"
                      member_role: 2
                    - user_id: "b1c2d3e4f5g6h7i8j9k0l1m2n3o4p5q"
                      user_name: "risenfromashes"
                      full_name: "Ashrafur Rahman Khan"
                      profile_picture: "https://unsplash.com/photos/a-view-of-a-mountain-range-in-the-desert-t3dlLOhdEzs"
                      member_role: 1
                    - user_id: "c3d4e5f6g7h8i9j0k1l2m3n4o5p6q7r"
                      user_name: "BRAINIAC77"
                      full_name: "Asif Azad"
                      profile_picture: "https://unsplash.com/photos/a-person-standing-on-a-beach-with-a-surfboard-RI5FdLjKAXU"
                      member_role: 2
        "401":
          description: Unauthorized - User is not an admin of the board
        "404":
          description: Board not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NonExistentBoardResponse"
        "500":
          description: Internal Server Error
  /update-board-settings/{board-id}:
    put:
      summary: Update settings of a board, ownership transfer is through different API
      tags:
        - Board
      parameters:
        - name: board-id
          in: path
          description: ID of the board whose settings are to be updated
          required: true
          schema:
            type: integer
            example: 3
      requestBody:
        description: Board settings
        content:
          application/json:
            schema:
              allOf:
                - $ref: "#/components/schemas/BoardSettings"
              example:
                board_id: 2
                board_name: "Wazuh Research Project"
                board_description: "This board is created for coordination of the Wazuh research project"
                board_deadline: "2024-02-28T00:00:00.000Z"
      responses:
        "200":
          description: Board settings successfully updated
        "401":
          description: Unauthorized - User is not an admin of the board
        "404":
          description: Board not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NonExistentBoardResponse"
        "500":
          description: Internal Server Error
  /add-member/{board-id}/{user-id}:
    post:
      summary: Add a member to a board
      tags:
        - Board
      parameters:
        - name: board-id
          in: path
          description: ID of the board to which the member is to be added
          required: true
          schema:
            type: integer
            example: 3
        - name: user-id
          in: path
          description: ID of the user to be added as a member
          required: true
          schema:
            type: string
            example: "c3d4e5f6g7h8i9j0k1l2m3n4o5p6q7r"
      responses:
        "200":
          description: Member successfully added
        "401":
          description: Unauthorized - User is not an admin of the board
        "404":
          description: Board or user not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: Board or user not found
                  message:
                    type: string
                    example: The specified board ID or user ID does not exist
        "500":
          description: Internal Server Error
  /remove-member/{board-id}/{user-id}:
    delete:
      summary: Remove a member from a board, possible for only the owner of the board
      tags:
        - Board
      parameters:
        - name: board-id
          in: path
          description: ID of the board from which the member is to be removed
          required: true
          schema:
            type: integer
            example: 2
        - name: user-id
          in: path
          description: ID of the user to be removed as a member
          required: true
          schema:
            type: string
            example: "b1c2d3e4f5g6h7i8j9k0l1m2n3o4p5q"
      responses:
        "200":
          description: Member successfully removed
        "401":
          description: Unauthorized - User is not the owner of the board
        "404":
          description: Board or user not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: Board or user not found
                  message:
                    type: string
                    example: The specified board ID or user ID does not exist
        "500":
          description: Internal Server Error
  /update-board-access/{user-id}:
    put:
      summary: Update access of a member of a board, possible for only the owner of the board
      tags:
        - Board
      parameters:
        - name: user-id
          in: path
          description: ID of the user whose access is to be updated
          required: true
          schema:
            type: string
            example: "af3b4c5d6e7f8g9h0i1j2k3l4m5n6o7p"
      requestBody:
        description: Update access of a board for a member
        content:
          application/json:
            schema:
              type: object
              properties:
                member_role:
                  type: integer
                  example: 2
                  description: "1 - Owner, 2 - Admin, 3 - Member"
      responses:
        "200":
          description: Member access successfully updated
        "401":
          description: Unauthorized - User is not the owner of the board
        "404":
          description: User not a member of the board
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: User is not a member of the board
                  message:
                    type: string
                    example: The specified user is not a member of the board
        "500":
          description: Internal Server Error
  /create-board:
    post:
      summary: Create a new board
      tags:
        - Board
      requestBody:
        description: Board details
        content:
          application/json:
            schema:
              allOf:
                - $ref: "#/components/schemas/BoardSettings"
              example:
                board_name: "ISD Project | ExploreMate"
                board_description: "This board is created for coordination of the ISD project"
                board_deadline: "2023-12-05T00:00:00.000Z"
                board_members:
                  - user_id: "af3b4c5d6e7f8g9h0i1j2k3l4m5n6o7p"
                    user_name: "Sadat999"
                    full_name: "Mohammad Sadat Hossain"
                    profile_picture: "https://unsplash.com/photos/a-long-exposure-photo-of-a-mountain-road-l2scWsGyq_U"
                    member_role: 1
                  - user_id: "c3d4e5f6g7h8i9j0k1l2m3n4o5p6q7r"
                    user_name: "BRAINIAC77"
                    full_name: "Asif Azad"
                    profile_picture: "https://unsplash.com/photos/a-person-standing-on-a-beach-with-a-surfboard-RI5FdLjKAXU"
                    member_role: 2
                  - user_id: "d4e5f6g7h8i9j0k1l2m3n4o5p6q7r"
                    user_name: "shattik420"
                    full_name: "Shattik Islam Rhythm"
                    profile_picture: "https://unsplash.com/photos/a-view-of-a-mountain-range-in-the-desert-t3dlLOhdEzs"
                    member_role: 2
                  - user_id: "e5f6g7h8i9j0k1l2m3n4o5p6q7r8s9t"
                    user_name: "Tahmid-404"
                    full_name: "Nafis Tahmid"
                    profile_picture: "https://unsplash.com/photos/an-aerial-view-of-a-desert-with-rocks-and-sand-4q87Z96NBYg"
                  - user_id: "f6g7h8i9j0k1l2m3n4o5p6q7r8s9t0u"
                    user_name: "shitdroid"
                    full_name: "Wasif Hamid"
                    profile_picture: "https://unsplash.com/photos/a-couple-of-lounge-chairs-sitting-next-to-a-swimming-pool-7XMl6DyEyGk"
                  - user_id: "g7h8i9j0k1l2m3n4o5p6q7r8s9t0u1v"
                    user_name: "amirulislamalif"
                    full_name: Amirul Islam Alif
                    profile_picture: "https://unsplash.com/photos/a-person-looking-out-from-a-cave-in-the-desert-9bE0LlCrX2M"
      responses:
        "200":
          description: Board successfully created
          content:
            application/json:
              schema:
                type: object
                properties:
                  board_id:
                    type: integer
                    example: 5
                  board_name:
                    type: string
                    example: "ISD Project | ExploreMate"
                  created_at:
                    type: string
                    format: date-time
                    example: "2023-08-23T00:00:00.000Z"
        "400":
          description: Bad request - Invalid input
        "500":
          description: Internal Server Error
  /delete-board/{board-id}:
    delete:
      summary: Delete a board, only possible for the owner of the board
      tags:
        - Board
      parameters:
        - name: board-id
          in: path
          description: ID of the board to be deleted
          required: true
          schema:
            type: integer
            example: 3
      responses:
        "200":
          description: Board successfully deleted
        "401":
          description: Unauthorized - User is not the owner of the board
        "404":
          description: Board not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NonExistentBoardResponse"
        "500":
          description: Internal Server Error
  /get-lists/{board-id}:
    get:
      summary: Get all lists of a board along with minimal detail
      tags:
        - List
      parameters:
        - name: board-id
          in: path
          description: ID of the board whose lists are to be retrieved
          required: true
          schema:
            type: integer
            example: 3
      responses:
        "200":
          description: Lists successfully retrieved
          content:
            application/json:
              schema:
                type: array
                items:
                  allOf:
                    - $ref: "#/components/schemas/ListSummarizedForm"
                  example:
                    - list_id: 7
                      list_name: "Project Scope Presentation"
                      list_description: "The first week's assignment"
                      list_deadline: "2023-08-05T00:00:00.000Z"
                      list_overall_progress: 1.00
                    - list_id: 8
                      list_name: "BPMN Diagram"
                      list_description: "The second week's assignment"
                      list_deadline: "2023-08-19T00:00:00.000Z"
                      list_overall_progress: 1.00
                    - list_id: 9
                      list_name: "Mock UI Design"
                      list_description: "The third week's assignment"
                      list_deadline: "2023-09-03T00:00:00.000Z"
                      list_overall_progress: 1.00
                    - list_id: 10
                      list_name: "ERD & Class Diagram"
                      list_description: "The fourth week's assignment"
                      list_deadline: "2023-09-17T00:00:00.000Z"
                      list_overall_progress: 1.00
                    - list_id: 11
                      list_name: "Collaboration, Sequence & State Diagram"
                      list_description: "The fifth week's assignment"
                      list_deadline: "2023-09-30T00:00:00.000Z"
                      list_overall_progress: 1.00
                    - list_id: 12
                      list_name: "Partial Software Demonstration"
                      list_description: "The sixth week's assignment"
                      list_deadline: "2023-10-20T00:00:00.000Z"
                      list_overall_progress: 0.33
        "401":
          description: Unauthorized - User does not have view access to the list
        "404":
          description: Board not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NonExistentBoardResponse"
        "500":
          description: Internal Server Error
  /add-list/{board-id}:
    post:
      summary: Add a list to a board
      tags:
        - List
      parameters:
        - name: board-id
          in: path
          description: ID of the board to which the list is to be added
          required: true
          schema:
            type: integer
            example: 4
      requestBody:
        description: List details
        content:
          application/json:
            schema:
              type: object
              properties:
                list_name:
                  type: string
                  example: "API & Architecture Presentation"
                list_description:
                  type: string
                  example: "This presentation will be required to finalize the APIs of TaskFlow"
                list_deadline:
                  type: string
                  example: "2024-01-23T00:00:00.000Z"
      responses:
        "200":
          description: List successfully added to board
          content:
            application/json:
              schema:
                type: object
                properties:
                  list_id:
                    type: integer
                    example: 12
                  list_name:
                    type: string
                    example: "API & Architecture Presentation"
        "401":
          description: Unauthorized - User does not have edit access to the board
        "404":
          description: Board not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NonExistentBoardResponse"
        "409":
          description: Conflicting Input
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: Invalid Input
                  message:
                    type: string
                    example: List deadline cannot be further than board deadline
        "500":
          description: Internal Server Error
  /delete-list/{list-id}:
    delete:
      summary: Delete a list from a board
      tags:
        - List
      parameters:
        - name: list-id
          in: path
          description: ID of the list to be deleted
          required: true
          schema:
            type: integer
            example: 8
      responses:
        "200":
          description: List successfully deleted
        "401":
          description: Unauthorized - User does not have edit access to the list
        "404":
          description: List not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NonExistentListResponse"
        "500":
          description: Internal Server Error
  /get-list-content/{list-id}:
    get:
      summary: Get the content of a list
      tags:
        - List
      parameters:
        - name: list-id
          in: path
          description: ID of the list whose content is to be retrieved
          required: true
          schema:
            type: integer
            example: 8
      responses:
        "200":
          description: List content successfully retrieved
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/ListStructure"
                example:
                  list_id: 8
                  list_name: "Mock UI Design"
                  list_tasks:
                    - task_id: 4
                      task_name: "Sketch the design in a meeting"
                      task_deadline: "2023-10-10T00:00:00.000Z"
                      task_label_color: "#F2A541"
                      task_overall_progress: 1.00
                    - task_id: 5
                      task_name: "Design the home page"
                      task_deadline: "2023-10-12T00:00:00.000Z"
                      task_label_color: "#F23A41"
                      task_overall_progress: 1.00
                    - task_id: 6
                      task_name: "Design the profile settings page"
                      task_deadline: "2023-10-14T00:00:00.000Z"
                      task_label_color: "#F2F541"
                      task_overall_progress: 1.00
                    - task_id: 7
                      task_name: "Design the board view page"
                      task_deadline: "2023-10-15T00:00:00.000Z"
                      task_label_color: "#F2F541"
                      task_overall_progress: 1.00
        "401":
          description: Unauthorized - User does not have view access to the list
        "404":
          description: List not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NonExistentListResponse"
        "500":
          description: Internal Server Error
  /update-list-access/{list-id}/{member-id}:
    put:
      summary: Update access of a user in a list
      tags:
        - List
      parameters:
        - name: list-id
          in: path
          description: ID of the list whose member access is to be updated
          required: true
          schema:
            type: integer
            example: 8
        - name: member-id
          in: path
          description: Member ID of the user whose access is to be updated
          required: true
          schema:
            type: integer
            example: 12
      requestBody:
        description: Member access
        content:
          application/json:
            schema:
              type: object
              properties:
                member_role:
                  type: integer
                  example: 2
                  description: "1 - Owner, 2 - Admin, 3 - Member"
      responses:
        "200":
          description: Member access successfully updated
        "401":
          description: Unauthorized - User does not have admin access to the list
        "404":
          description: User or task list not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: User or task list not found
                  message:
                    type: string
                    example: The specified user ID or task list ID does not exist
        "500":
          description: Internal Server Error
  /get-list-settings/{list-id}:
    get:
      summary: Get settings of a list
      tags:
        - List
      parameters:
        - name: list-id
          in: path
          description: ID of the list whose settings are to be retrieved
          required: true
          schema:
            type: integer
            example: 8
      responses:
        "200":
          description: List settings successfully retrieved
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/ListSettings"
                example:
                  list_id: 8
                  list_name: "Mock UI Design"
                  list_description: "The second week's assignment"
                  list_deadline: "2023-10-17T00:00:00.000Z"
                  list_members:
                    - user_id: "af3b4c5d6e7f8g9h0i1j2k3l4m5n6o7p"
                      user_name: "Sadat999"
                      full_name: "Mohammad Sadat Hossain"
                      profile_picture: "https://unsplash.com/photos/a-long-exposure-photo-of-a-mountain-road-l2scWsGyq_U"
                      member_role: 1
                    - user_id: "c3d4e5f6g7h8i9j0k1l2m3n4o5p6q7r"
                      user_name: "BRAINIAC77"
                      full_name: "Asif Azad"
                      profile_picture: "https://unsplash.com/photos/a-person-standing-on-a-beach-with-a-surfboard-RI5FdLjKAXU"
                      member_role: 2
                    - user_id: "d4e5f6g7h8i9j0k1l2m3n4o5p6q7r"
                      user_name: "shattik420"
                      full_name: "Shattik Islam Rhythm"
                      profile_picture: "https://unsplash.com/photos/a-view-of-a-mountain-range-in-the-desert-t3dlLOhdEzs"
                      member_role: 2
                    - user_id: "e5f6g7h8i9j0k1l2m3n4o5p6q7r8s9t"
                      user_name: "Tahmid-404"
                      full_name: "Nafis Tahmid"
                      profile_picture: "https://unsplash.com/photos/an-aerial-view-of-a-desert-with-rocks-and-sand-4q87Z96NBYg"
                    - user_id: "f6g7h8i9j0k1l2m3n4o5p6q7r8s9t0u"
                      user_name: "shitdroid"
                      full_name: "Wasif Hamid"
                      profile_picture: "https://unsplash.com/photos/a-couple-of-lounge-chairs-sitting-next-to-a-swimming-pool-7XMl6DyEyGk"
                    - user_id: "g7h8i9j0k1l2m3n4o5p6q7r8s9t0u1v"
                      user_name: "amirulislamalif"
                      full_name: Amirul Islam Alif
                      profile_picture: "https://unsplash.com/photos/a-person-looking-out-from-a-cave-in-the-desert-9bE0LlCrX2M"
        "401":
          description: Unauthorized - User does not have admin access to the list
        "404":
          description: List not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NonExistentListResponse"
        "500":
          description: Internal Server Error
  /update-list-settings/{list-id}:
    put:
      summary: Update settings of a list
      tags:
        - List
      parameters:
        - name: list-id
          in: path
          description: ID of the list whose settings are to be updated
          required: true
          schema:
            type: integer
            example: 8
      requestBody:
        description: List settings
        content:
          application/json:
            schema:
              allOf:
                - $ref: "#/components/schemas/ListSettings"
              example:
                list_name: "Mock UI Design"
                list_description: "The second week's assignment"
                list_deadline: "2023-10-17T00:00:00.000Z"
      responses:
        "200":
          description: List settings successfully updated
        "401":
          description: Unauthorized - User does not have edit access to the list
        "404":
          description: List not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NonExistentListResponse"
        "409":
          description: Conflicting Input
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: Invalid Input
                  message:
                    type: string
                    example: List deadline cannot be further than board deadline
        "500":
          description: Internal Server Error
  /get-tasks/{list-id}:
    get:
      summary: Get all tasks of a list along with their minimal detail
      tags:
        - Task
      parameters:
        - name: list-id
          in: path
          description: ID of the task list whose tasks are to be retrieved
          required: true
          schema:
            type: integer
            example: 8
      responses:
        "200":
          description: Tasks successfully retrieved
          content:
            application/json:
              schema:
                type: array
                items:
                  allOf:
                    - $ref: "#/components/schemas/TaskSummarizedForm"
                example:
                  - task_id: 4
                    task_name: "Implement the dashboard page"
                    task_deadline: "2024-01-23T00:00:00.000Z"
                    task_label_color: "#F2A541"
                    task_overall_progress: 0.85
                  - task_id: 5
                    task_name: "Implement the profile settings page"
                    task_deadline: "2024-01-28T00:00:00.000Z"
                    task_label_color: "#F23A41"
                    task_overall_progress: 0.86
                  - task_id: 6
                    task_name: "Implement the notifications feature"
                    task_deadline: "2024-02-02T00:00:00.000Z"
                    task_label_color: "#F2F541"
                    task_overall_progress: 1.00
        "401":
          description: Unauthorized - User does not have view access to the list
        "404":
          description: List not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NonExistentListResponse"
        "500":
          description: Internal Server Error
  /get-task-detail/{task-id}:
    get:
      summary: Get all details of a task
      tags:
        - Task
      parameters:
        - name: task-id
          in: path
          description: ID of the task whose details are to be retrieved
          required: true
          schema:
            type: integer
            example: 23
      responses:
        "200":
          description: Task details successfully retrieved
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/TaskDetail"
                example:
                  task_id: 12
                  task_name: "Implement the dashboard page"
                  task_description: "This is the page the user will see after logging in"
                  task_cover_photo: "https://unsplash.com/photos/a-couple-of-people-that-are-standing-in-the-grass--V_jGnufxTQ"
                  task_label_color: "#F2A541"
                  task_start_time: "2024-01-10T00:00:00.000Z"
                  task_deadline: "2024-01-23T00:00:00.000Z"
                  task_labels:
                    - label_id: 1
                      label_name: "new-feature"
                    - label_id: 2
                      label_name: "first-development"
                    - label_id: 3
                      label_name: "urgent"
                  task_assignees:
                    - user_id: "af3b4c5d6e7f8g9h0i1j2k3l4m5n6o7p"
                      user_name: "Sadat999"
                      profile_picture: "https://unsplash.com/photos/a-long-exposure-photo-of-a-mountain-road-l2scWsGyq_U"
                    - user_id: "c3d4e5f6g7h8i9j0k1l2m3n4o5p6q7r"
                      user_name: "amirulislamalif"
                      profile_picture: "https://unsplash.com/photos/a-person-looking-out-from-a-cave-in-the-desert-9bE0LlCrX2M"
                  task_checklist_items:
                    - item_id: 11
                      item_name: "Implement the top card"
                      item_status: false
                    - item_id: 12
                      item_name: "Implement the drawer"
                      item_status: true
                    - item_id: 13
                      item_name: "Add the navigation bar"
                      item_status: true
                    - item_id: 14
                      item_name: "Add responsiveness"
                      item_status: false
                    - item_id: 15
                      item_name: "Add animations"
                      item_status: false

        "401":
          description: Unauthorized - User does not have view access to the task
        "404":
          description: Task not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NonExistentTaskResponse"
        "500":
          description: Internal Server Error
  /get-all-labels:
    get:
      summary: Get all labels across the application
      tags:
        - Task
      responses:
        "200":
          description: Labels successfully retrieved
          content:
            application/json:
              schema:
                type: array
                items:
                  allOf:
                    - $ref: "#/components/schemas/TaskLabel"
                  example:
                    - label_id: 1
                      label_name: "new-feature"
                    - label_id: 2
                      label_name: "first-development"
                    - label_id: 3
                      label_name: "urgent"
                    - label_id: 4
                      label_name: "bugfix"
                    - label_id: 5
                      label_name: "feature-release"
                    - label_id: 6
                      label_name: "documentation"
                    - label_id: 7
                      label_name: "enhancement"
        "500":
          description: Internal Server Error
  /add-label/{task-id}:
    post:
      summary: Add a label to a task, and if this is a new label, add it to the application
      tags:
        - Task
      parameters:
        - name: task-id
          in: path
          description: ID of the task to which the label is to be added
          required: true
          schema:
            type: integer
            example: 32
      requestBody:
        description: Label details
        content:
          application/json:
            schema:
              type: object
              properties:
                label_name:
                  type: string
                  example: "leisure-activity"
      responses:
        "200":
          description: Label successfully added
          content:
            application/json:
              schema:
                type: object
                properties:
                  label_id:
                    type: string
                    example: "1"
                  label_name:
                    type: string
                    example: "bugfix"
        "400":
          description: Bad request - Invalid input
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: Invalid Input
                  message:
                    type: string
                    example: Label with this name already exists
        "401":
          description: Unauthorized - User does not have edit access to the task
        "404":
          description: Task not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NonExistentTaskResponse"
        "500":
          description: Internal Server Error
  /update-task-detail/{task-id}:
    put:
      summary: Update details of a task (name, description, color, time)
      tags:
        - Task
      parameters:
        - name: task-id
          in: path
          description: ID of the task whose details are to be updated
          required: true
          schema:
            type: string
      requestBody:
        description: Task details
        content:
          application/json:
            schema:
              type: object
              properties:
                task_name:
                  type: string
                  example: "Task 1"
                task_description:
                  type: string
                  example: "This is the updated description"
                task_label_color:
                  type: string
                  example: "#FF0000"
                task_start_time:
                  type: string
                  format: date-time
                  example: "2023-08-05T00:00:00.000Z"
                task_deadline:
                  type: string
                  format: date-time
                  example: "2023-08-05T00:00:00.000Z"
      responses:
        "200":
          description: Task details successfully updated
        "400":
          description: Bad request - Invalid input
        "401":
          description: Unauthorized - User does not have edit access to the task
        "404":
          description: Task not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NonExistentTaskResponse"
        "500":
          description: Internal Server Error
  /update-cover-photo/{task-id}:
    put:
      summary: Update cover photo of a task
      tags:
        - Task
      parameters:
        - name: task-id
          in: path
          description: ID of the task whose cover photo is to be updated
          required: true
          schema:
            type: string
      requestBody:
        description: Task cover photo
        content:
          application/json:
            schema:
              type: object
              properties:
                task_cover_photo:
                  type: string
                  format: url
                  example: "https://source.unsplash.com/400x300/?work"
      responses:
        "200":
          description: Task cover photo successfully updated
        "400":
          description: Bad request - Invalid input
        "401":
          description: Unauthorized - User does not have edit access to the task
        "404":
          description: Task not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NonExistentTaskResponse"
        "500":
          description: Internal Server Error
  /get-messages/{task-id}:
    post:
      summary: Get messages of a task, having fields for how many messages to retrieve
      tags:
        - Task
      parameters:
        - name: task-id
          in: path
          description: ID of the task whose messages are to be retrieved
          required: true
          schema:
            type: string
      requestBody:
        description: Message details
        content:
          application/json:
            schema:
              type: object
              properties:
                n_messages:
                  type: integer
                  example: 10
                offset:
                  type: integer
                  example: 0
                  description: The offset is from the latest message
      responses:
        "200":
          description: Messages successfully retrieved
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    message_id:
                      type: string
                    message_content:
                      type: string
                    message_sender:
                      type: string
                    message_time:
                      type: string
                      format: date-time
                    message_attachment:
                      type: string
                      format: url
                      description: URL of the attachment, can be null
                example:
                  - message_id: "1"
                    message_content: "Hello"
                    message_sender: "Sadat999"
                    message_time: "2023-08-05T00:00:00.000Z"
                    message_attachment: "https://source.unsplash.com/400x300/?work"
                  - message_id: "2"
                    message_content: "Hi"
                    message_sender: "BRAINIAC77"
                    message_time: "2023-08-05T00:00:00.000Z"
                    message_attachment: null
                  - message_id: "3"
                    message_content: "How are you?"
                    message_sender: "Sadat999"
                    message_time: "2023-08-05T00:00:00.000Z"
                    message_attachment: null
                  - message_id: "4"
                    message_content: "I am fine"
                    message_sender: "BRAINIAC77"
                    message_time: "2023-08-05T00:00:00.000Z"
                    message_attachment: null
        "400":
          description: Bad request - Invalid input
        "401":
          description: Unauthorized - User is not an assignee of this task
        "404":
          description: Task not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NonExistentTaskResponse"
        "500":
          description: Internal Server Error
  /send-message/{task-id}:
    post:
      summary: Send a message to a task
      tags:
        - Task
      parameters:
        - name: task-id
          in: path
          description: ID of the task to which the message is to be sent
          required: true
          schema:
            type: string
      requestBody:
        description: Message details
        content:
          application/json:
            schema:
              type: object
              properties:
                message_content:
                  type: string
                  example: "Hello"
                message_attachment:
                  type: string
                  format: url
                  example: "https://source.unsplash.com/400x300/?work"
      responses:
        "200":
          description: Message successfully sent
          content:
            application/json:
              schema:
                type: object
                properties:
                  message_id:
                    type: string
                    example: "1"
                  message_sender:
                    type: string
                    example: "Sadat999"
                  message_time:
                    type: string
                    format: date-time
                    example: "2023-08-05T00:00:00.000Z"
        "400":
          description: Bad request - Invalid input
        "401":
          description: Unauthorized - User is not an assignee of this task
        "404":
          description: Task not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NonExistentTaskResponse"
        "500":
          description: Internal Server Error
  /get-sorted-tasks:
    get:
      summary: Get all tasks of the authenticated user sorted by ranking algorithm
      tags:
        - Task
      responses:
        "200":
          description: Tasks successfully retrieved
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    task_id:
                      type: string
                    task_name:
                      type: string
                    task_deadline:
                      type: string
                      format: date-time
                example:
                  - task_id: "1"
                    task_name: "Task 1"
                    task_deadline: "2023-08-05T00:00:00.000Z"
                  - task_id: "2"
                    task_name: "Task 2"
                    task_deadline: "2023-08-05T00:00:00.000Z"
        "500":
          description: Internal Server Error
  /get-unread-notifications:
    get:
      summary: Get all unread notifications of the authenticated user
      tags:
        - Notification
      responses:
        "200":
          description: Notifications successfully retrieved
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    notification_id:
                      type: string
                    notification_content:
                      type: string
                    notification_time:
                      type: string
                      format: date-time
                    notification_url_1:
                      type: string
                      format: url
                      description: URL of the first link, can be null
                    notification_url_2:
                      type: string
                      format: url
                      description: URL of the second link, can be null
                    notification_read:
                      type: boolean
                example:
                  - notification_id: "1"
                    notification_content: "You have been assigned to Task 1"
                    notification_time: "2023-08-05T00:00:00.000Z"
                    notification_url_1: "https://taskflow-express-api.vercel.app/"
                    notification_url_2: null
                    notification_read: false
                  - notification_id: "2"
                    notification_content: "You have been assigned to Task 2"
                    notification_time: "2023-08-05T00:00:00.000Z"
                    notification_url_1: "https://taskflow-express-api.vercel.app/"
                    notification_url_2: null
                    notification_read: false
        "500":
          description: Internal Server Error
  /get-notifications:
    post:
      summary: Get all notifications of the authenticated user, having fields for how many notifications to retrieve
      tags:
        - Notification
      requestBody:
        description: Notification details
        content:
          application/json:
            schema:
              type: object
              properties:
                n_notifications:
                  type: integer
                  example: 10
                offset:
                  type: integer
                  example: 0
                  description: The offset is from the latest notification
      responses:
        "200":
          description: Notifications successfully retrieved
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    notification_id:
                      type: string
                    notification_content:
                      type: string
                    notification_time:
                      type: string
                      format: date-time
                    notification_url_1:
                      type: string
                      format: url
                      description: URL of the first link, can be null
                    notification_url_2:
                      type: string
                      format: url
                      description: URL of the second link, can be null
                    notification_read:
                      type: boolean
                example:
                  - notification_id: "1"
                    notification_content: "You have been assigned to Task 1"
                    notification_time: "2023-08-05T00:00:00.000Z"
                    notification_url_1: "https://taskflow-express-api.vercel.app/"
                    notification_url_2: null
                    notification_read: true
                  - notification_id: "2"
                    notification_content: "You have been assigned to Task 2"
                    notification_time: "2023-08-05T00:00:00.000Z"
                    notification_url_1: "https://taskflow-express-api.vercel.app/"
                    notification_url_2: null
                    notification_read: false
        "400":
          description: Bad request - Invalid input
        "500":
          description: Internal Server Error
  /add-notification:
    post:
      summary: Add a notification to the authenticated user
      tags:
        - Notification
      requestBody:
        description: Notification details
        content:
          application/json:
            schema:
              type: object
              properties:
                notification_content:
                  type: string
                  example: "You have been assigned to Task 1"
                notification_url_1:
                  type: string
                  format: url
                  example: "https://taskflow-express-api.vercel.app/"
                notification_url_2:
                  type: string
                  format: url
                  example: null
      responses:
        "200":
          description: Notification successfully added
          content:
            application/json:
              schema:
                type: object
                properties:
                  notification_id:
                    type: string
                    example: "1"
                  notification_content:
                    type: string
                    example: "You have been assigned to Task 1"
                  notification_time:
                    type: string
                    format: date-time
                    example: "2023-08-05T00:00:00.000Z"
                  notification_url_1:
                    type: string
                    format: url
                    example: "https://taskflow-express-api.vercel.app/"
                  notification_url_2:
                    type: string
                    format: url
                    example: null
                  notification_read:
                    type: boolean
                    example: false
        "400":
          description: Bad request - Invalid input
        "500":
          description: Internal Server Error
  /mark-notification-as-read:
    put:
      summary: Mark a notification as read
      tags:
        - Notification
      requestBody:
        description: Notification details
        content:
          application/json:
            schema:
              type: object
              properties:
                notification_id:
                  type: string
                  example: "1"
      responses:
        "200":
          description: Notification successfully marked as read
        "400":
          description: Bad request - Invalid input
        "500":
          description: Internal Server Error

components:
  schemas:
    RegistrationInformation:
      type: object
      properties:
        first_name:
          type: string
          example: "Asif"
        middle_name:
          type: string
          example: ""
        last_name:
          type: string
          example: "Azad"
        user_name:
          type: string
          example: "BRAINIAC77"
        email_address:
          type: string
          format: email
          example: "brainiac2677@gmail.com"
        phone_number:
          type: string
          example: "01712345678"
        password:
          type: string
          format: password
          example: "78LqSa6dFA9"
          description: Password will be hashed before sending to the server
    UserPublicProfileResponse:
      type: object
      properties:
        user_id:
          type: string
          example: "af3b4c5d6e7f8g9h0i1j2k3l4m5n6o7p"
        full_name:
          type: string
          example: "Mohammad Sadat Hossain"
        user_name:
          type: string
          example: "Sadat999"
        email_address:
          type: string
          format: email
          example: "sadatho2014@gmail.com"
        phone_number:
          type: string
          example: "01732145678"
        profile_picture:
          type: string
          format: url
          example: "https://unsplash.com/photos/a-man-sitting-on-a-rock-in-the-desert-ud9NlvvEzUI"
        bio:
          type: string
          example: "I am a software engineer"
        task_completion_rate:
          type: number
          format: float
          description: Percentage of tasks completed out of all tasks assigned to the user
          example: 0.75
        task_completion_count:
          type: integer
          example: 5
        longest_streak:
          type: integer
          description: Longest streak of consecutive days with at least one task completed
          example: 13
    UserProfileSettings:
      type: object
      properties:
        user_id:
          type: string
        first_name:
          type: string
        middle_name:
          type: string
        last_name:
          type: string
        user_name:
          type: string
        password:
          type: string
        phone_number:
          type: string
        email_address:
          type: string
          format: email
        bio:
          type: string
    MemberMinimalRepresentation:
      type: object
      properties:
        user_id:
          type: string
        user_name:
          type: string
        full_name:
          type: string
        profile_picture:
          type: string
          format: url
        member_role:
          type: integer
          description: "1 - Owner, 2 - Admin, 3 - Member"
    ListSummarizedForm:
      type: object
      properties:
        list_id:
          type: integer
        list_name:
          type: string
        list_description:
          type: string
        list_deadline:
          type: string
          format: date-time
        list_overall_progress:
          type: number
          format: float
          # description: Percentage of tasks completed out of all tasks in the list
    ListSettings:
      type: object
      properties:
        list_id:
          type: integer
        list_name:
          type: string
        list_description:
          type: string
        list_deadline:
          type: string
          format: date-time
        list_members:
          $ref: "#/components/schemas/MemberMinimalRepresentation"
    BoardSummarizedForm:
      type: object
      properties:
        board_id:
          type: integer
        board_name:
          type: string
        board_description:
          type: string
        created_at:
          type: string
          format: date-time
        board_deadline:
          type: string
          format: date-time
        board_owner:
          type: string
          description: User name of the board owner
        board_overall_progress:
          type: number
          format: float
          description: Percentage of tasks completed out of all tasks in the board
    BoardSettings:
      type: object
      properties:
        board_id:
          type: integer
        board_name:
          type: string
        board_description:
          type: string
        board_owner:
          type: string
          description: User name of the board owner
        board_deadline:
          type: string
          format: date-time
        board_members:
          $ref: "#/components/schemas/MemberMinimalRepresentation"
    BoardContent:
      type: object
      properties:
        board_id:
          type: integer
        board_name:
          type: string
        board_lists:
          type: array
          items:
            $ref: "#/components/schemas/ListStructure"
    ListStructure:
      type: object
      properties:
        list_id:
          type: integer
        list_name:
          type: string
        list_tasks:
          type: array
          items:
            $ref: "#/components/schemas/TaskSummarizedForm"
    TaskSummarizedForm:
      type: object
      properties:
        task_id:
          type: integer
        task_name:
          type: string
        task_deadline:
          type: string
          format: date-time
        task_label_color:
          type: string
        task_overall_progress:
          type: number
          format: float
          # description: Percentage of checklist items completed out of all checklist items in the task
    TaskLabel:
      type: object
      properties:
        label_id:
          type: integer
        label_name:
          type: string
    TaskAssignee:
      type: object
      properties:
        user_id:
          type: string
        user_name:
          type: string
        profile_picture:
          type: string
          format: url
    ChecklistItem:
      type: object
      properties:
        item_id:
          type: integer
        item_name:
          type: string
        item_status:
          type: boolean
    TaskDetail:
      type: object
      properties:
        task_id:
          type: integer
        task_name:
          type: string
        task_description:
          type: string
        task_cover_photo:
          type: string
          format: url
        task_label_color:
          type: string
        task_start_time:
          type: string
          format: date-time
        task_deadline:
          type: string
          format: date-time
        task_labels:
          type: array
          items:
            $ref: "#/components/schemas/TaskLabel"
        task_assignees:
          type: array
          items:
            $ref: "#/components/schemas/TaskAssignee"
        task_checklist_items:
          type: array
          items:
            $ref: "#/components/schemas/ChecklistItem"
    NonExistentUserResponse:
      type: object
      properties:
        error:
          type: string
          example: User not found
        message:
          type: string
          example: The specified user ID does not exist
    NonExistentBoardResponse:
      type: object
      properties:
        error:
          type: string
          example: Board not found
        message:
          type: string
          example: The specified board ID does not exist
    NonExistentListResponse:
      type: object
      properties:
        error:
          type: string
          example: Task list not found
        message:
          type: string
          example: The specified task list ID does not exist
    NonExistentTaskResponse:
      type: object
      properties:
        error:
          type: string
          example: Task not found
        message:
          type: string
          example: The specified task ID does not exist
